{"config":{"lang":["en"],"separator":"[\\s\\-,\\.:!=\\[\\]()\"/]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Adobe Media Encoder (AME) Scripting Guide","text":"<p>This guide shows you how to use ExtendScript to script AME and how to automate recurring tasks.</p> <p>The first part is about concepts &amp; techniques, the second part is an alphabetical reference with all objects, methods, and properties described in full detail, including parameter types, return values, default values, explanations of parameter values, and full code examples that can be used as a starting point.</p>"},{"location":"#contribution","title":"Contribution","text":"<p>This endeavour is primarily community-supported &amp; run; contributors are welcome and encouraged to suggest fixes, adjustments, notes/warnings, and anything else that may help the project.</p>"},{"location":"#licensing-ownership","title":"Licensing &amp; Ownership","text":"<p>This project exists for educational purposes only.</p> <p>All content is copyright Adobe Systems Incorporated.</p>"},{"location":"_global/readme/","title":"docsforadobe.dev MkDocs Config","text":"<p>This repo holds the common components shared between this org's hosted MkDocs documentation projects.</p> <p>The idea is that this repo will be kept up-to-date with global config, and each child repo will use the provided script to download the latest commit from this repo, and have its \"local\" MkDocs config point to the downloaded files from this repo.</p> <p>In all cases, each child repo will be able to override config items here as needed.</p>"},{"location":"_global/readme/#updating-this-repo","title":"Updating This Repo","text":"<p>See Modifying Common Components in the org contribution guide for info on how this repo works, and best practices for modifying it.</p>"},{"location":"introduction/overview/","title":"Overview","text":"<p>This is a community-created and -maintained project documenting Extendscript usage for Adobe Media Encoder.</p>"},{"location":"introduction/overview/#how-do-i-run-scripts-in-ame","title":"How do I run scripts in AME?","text":"<p>Similarly to Premiere Pro, you can use Visual Studio Code and the \u201cExtendScript Debugger\u201d extension to send scripts from VS Code to AME and debug them in the app. Open the script, select the target and run or debug the script.</p> <p>You can also launch scripts from the command line on Mac and Windows, like this:</p> <pre><code>&lt;fullPathToAMEbinary&gt; --console es.processFile &lt;fullPathToScript&gt;\n</code></pre> <p>Example for executing a test script on Mac:</p> <pre><code>\"/Applications/Adobe Media Encoder (Beta)/Adobe Media Encoder (Beta).app/\n Contents/MacOS/Adobe Media Encoder (Beta)\"\n --console es.processFile ~/Desktop/test.js\n</code></pre>"},{"location":"introduction/overview/#what-is-a-good-starting-point-to-understand-the-scripting-objects","title":"What is a good starting point to understand the scripting objects?","text":"<p>Lets start with a very basic script:</p> <pre><code>// make sure to replace \"\\\\\" by \"/\" on Mac with a valid path\nvar source = \"D:\\\\full\\\\path\\\\to\\\\camera3.mxf\";\nvar preset = \"D:\\\\full\\\\path\\\\to\\\\AME\\\\MediaIO\\\\systempresets\\\\58444341_4d584658\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\full\\\\path\\\\to\\\\Output\\\\test\";\n\nvar exporter = app.getExporter();\n\nif (exporter) {\n   var encoderWrapper  = exporter.exportItem(source, destination, preset);\n\n   exporter.addEventListener(\"onEncodeComplete\", function(eventObj) {\n        // We can get the encoding status from the event or from the exporter\n        $.writeln(\"Encode Complete Status: \" + eventObj.encodeCompleteStatus);\n\n        var encodeSuccess = exporter.encodeSuccess;\n        $.writeln(\"Encode Complete Status alt: \" + encodeSuccess);\n    }, false)\n\n    exporter.addEventListener(\"onError\", function(eventObj) {\n        // We can get the encoding status from the event or from the exporter\n        $.writeln(\"Error while encoding\");\n\n        var encodeSuccess = exporter.encodeSuccess;\n        $.writeln(\"Encode Complete Status: \" + encodeSuccess);\n    }, false)\n\n}\n</code></pre> <p>In order to encode a source file in AME, you need to provide the paths of the source file and destination folder, and the preset to be used.</p> <p>The event listener for <code>onEncodeComplete</code> will be called once the encode has successfully finished.</p>"},{"location":"introduction/overview/#where-can-i-ask-more-questions-and-get-help","title":"Where can I ask more questions and get help?","text":"<p>Got more questions than what is covered here? Head over to the Adobe Media Encoder forum here: https://community.adobe.com/t5/adobe-media-encoder/ct-p/ct-media-encoder</p>"},{"location":"reference/Application/","title":"Application Object","text":"<p><code>app</code></p> <p>Top level app object</p>"},{"location":"reference/Application/#attributes","title":"Attributes","text":""},{"location":"reference/Application/#applicationbuildnumber","title":"Application.buildNumber","text":"<p><code>app.buildNumber</code></p>"},{"location":"reference/Application/#description","title":"Description","text":"<p>Application build number</p>"},{"location":"reference/Application/#type","title":"Type","text":"<p>String</p>"},{"location":"reference/Application/#methods","title":"Methods","text":""},{"location":"reference/Application/#applicationasserttoconsole","title":"Application.assertToConsole()","text":"<p><code>app.assertToConsole()</code></p>"},{"location":"reference/Application/#description_1","title":"Description","text":"<p>Redirect assert output to stdout.</p>"},{"location":"reference/Application/#returns","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/Application/#applicationbringtofront","title":"Application.bringToFront()","text":"<p><code>app.bringToFront()</code></p>"},{"location":"reference/Application/#description_2","title":"Description","text":"<p>Bring application to front</p>"},{"location":"reference/Application/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/Application/#applicationcanceltask","title":"Application.cancelTask()","text":"<p><code>app.cancelTask(taskID)</code></p>"},{"location":"reference/Application/#description_3","title":"Description","text":"<p>Cancel the task that matches the task ID</p>"},{"location":"reference/Application/#parameters","title":"Parameters","text":"Parameter Type Description <code>taskID</code> Integer The task ID to cancel"},{"location":"reference/Application/#returns_2","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/Application/#applicationgetencoderhost","title":"Application.getEncoderHost()","text":"<p><code>app.getEncoderHost()</code></p>"},{"location":"reference/Application/#description_4","title":"Description","text":"<p>Get the encoder host object.</p>"},{"location":"reference/Application/#returns_3","title":"Returns","text":"<p>EncoderHostScript Object</p>"},{"location":"reference/Application/#applicationgetexporter","title":"Application.getExporter()","text":"<p><code>app.getExporter()</code></p>"},{"location":"reference/Application/#description_5","title":"Description","text":"<p>Get the exporter object.</p>"},{"location":"reference/Application/#returns_4","title":"Returns","text":"<p>ExporterScript Object</p>"},{"location":"reference/Application/#example","title":"Example","text":"<pre><code>var exporter = app.getExporter();\n// check ExporterScriptObject to see which methods/properties you can apply\n</code></pre>"},{"location":"reference/Application/#applicationgetfrontend","title":"Application.getFrontend()","text":"<p><code>app.getFrontend()</code></p>"},{"location":"reference/Application/#description_6","title":"Description","text":"<p>Get the front end object.</p>"},{"location":"reference/Application/#returns_5","title":"Returns","text":"<p>FrontendScript Object</p>"},{"location":"reference/Application/#applicationgetwatchfolder","title":"Application.getWatchFolder()","text":"<p><code>app.getWatchFolder()</code></p>"},{"location":"reference/Application/#description_7","title":"Description","text":"<p>Get the watch folder object.</p>"},{"location":"reference/Application/#returns_6","title":"Returns","text":"<p>WatchFolderScript Object</p>"},{"location":"reference/Application/#applicationisblackvideo","title":"Application.isBlackVideo()","text":"<p><code>app.isBlackVideo(sourcePath)</code></p>"},{"location":"reference/Application/#description_8","title":"Description","text":"<p>Checks whether all frames of a video are black.</p>"},{"location":"reference/Application/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>sourcePath</code> String Source path of video to check"},{"location":"reference/Application/#returns_7","title":"Returns","text":"<p>Boolean; <code>true</code> if all frames are black</p>"},{"location":"reference/Application/#example_1","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia.mp4\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia.mp4\"\n\nvar blackVideo = app.isBlackVideo(source);\nif (blackVideo) {\n  $.writeln(\"The input file has only black frames\");\n}\n</code></pre>"},{"location":"reference/Application/#applicationissilentaudio","title":"Application.isSilentAudio()","text":"<p><code>app.isSilentAudio(sourcePath)</code></p>"},{"location":"reference/Application/#description_9","title":"Description","text":"<p>Checks whether a file has no audio</p>"},{"location":"reference/Application/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>sourcePath</code> String Source path of file to check"},{"location":"reference/Application/#returns_8","title":"Returns","text":"<p>Boolean; <code>true</code> if audio is silent</p>"},{"location":"reference/Application/#example_2","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia.mp4\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia.mp4\"\n\nvar silent = app.isSilentAudio(source);\nif (silent) {\n  $.writeln(\"The input file has no audio\");\n}\n</code></pre>"},{"location":"reference/Application/#applicationquit","title":"Application.quit()","text":"<p><code>app.quit()</code></p>"},{"location":"reference/Application/#description_10","title":"Description","text":"<p>Quit the AME app</p>"},{"location":"reference/Application/#returns_9","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/Application/#applicationrenderframesequence","title":"Application.renderFrameSequence()","text":"<p><code>app.renderFrameSequence(sourcePath, outputPath, renderAll, startFrame)</code></p>"},{"location":"reference/Application/#description_11","title":"Description","text":"<p>Render still frames for given source</p>"},{"location":"reference/Application/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>sourcePath</code> String Source path of file to render <code>outputPath</code> String Output path to render to <code>renderAll</code> Boolean Whether to render all frames <code>startFrame</code> Integer Start frame to render from"},{"location":"reference/Application/#returns_10","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/Application/#example_3","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia4.mp4\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia4.mp4\"\n// var destination = \"/Users/Shared/testdata/outputFolder/output.mp4;\n\nvar renderall = true;\nvar startTime = 0;\nvar success = app.renderFrameSequence(\n  source,\n  destination,\n  renderall,\n  startTime\n);\nif (success) {\n  $.writeln(\"renderFrameSequence() successfully done\");\n}\n</code></pre>"},{"location":"reference/Application/#applicationscheduletask","title":"Application.scheduleTask()","text":"<p><code>app.scheduleTask(scriptToExecute, delayInMilliseconds, repeat)</code></p>"},{"location":"reference/Application/#description_12","title":"Description","text":"<p>Schedule a script to run after delay</p>"},{"location":"reference/Application/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>scriptToExecute</code> String Your script as text, e.g.\u00a0<code>app.getEncoderHost().runBatch()</code> <code>delayInMilliseconds</code> Integer Number of milliseconds to delay before rendering <code>repeat</code> Boolean Whether to repeat the schedule"},{"location":"reference/Application/#returns_11","title":"Returns","text":"<p>Integer, the task ID</p>"},{"location":"reference/Application/#example_4","title":"Example","text":"<pre><code>var format = \"\";\nvar source = \"C:\\\\testdata\\\\testmedia4.mp4\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia4.mp4\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  // Either format or preset can be empty, output is optional\n  var encoderWrapper = frontend.addFileToBatch(source, format, preset);\n\n  if (encoderWrapper) {\n    var taskID = app.scheduleTask(\n      \"var e = app.getEncoderHost(); e.runBatch()\",\n      5000,\n      false\n    );\n  } else {\n    $.writeln(\"Encoder wrapper object is not valid.\");\n  }\n} else {\n  $.writeln(\"Frontend object is not valid.\");\n}\n</code></pre>"},{"location":"reference/Application/#applicationwait","title":"Application.wait()","text":"<p><code>app.wait(milliseconds)</code></p>"},{"location":"reference/Application/#description_13","title":"Description","text":"<p>Non UI blocking</p>"},{"location":"reference/Application/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>milliseconds</code> Unsigned int The number of milliseconds to wait"},{"location":"reference/Application/#returns_12","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/Application/#applicationwrite","title":"Application.write()","text":"<p><code>app.write(text)</code></p>"},{"location":"reference/Application/#description_14","title":"Description","text":"<p>Write text to std out</p>"},{"location":"reference/Application/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>text</code> String The text to write"},{"location":"reference/Application/#returns_13","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderHostScript/","title":"EncoderHostScript Object","text":"<p><code>app.getEncoderHost()</code></p> <p>Provides several utility methods including batch commands to run, pause or stop the batch.</p>"},{"location":"reference/EncoderHostScript/#methods","title":"Methods","text":""},{"location":"reference/EncoderHostScript/#encoderhostscriptcreateencoderforformat","title":"EncoderHostScript.createEncoderForFormat()","text":"<p><code>app.getEncoderHost().createEncoderForFormat(inFormatName)</code></p>"},{"location":"reference/EncoderHostScript/#description","title":"Description","text":"<p>Creates an EncoderWrapper for the requested format.</p>"},{"location":"reference/EncoderHostScript/#parameters","title":"Parameters","text":"Parameter Type Description <code>inFormatName</code> String The name of the format"},{"location":"reference/EncoderHostScript/#returns","title":"Returns","text":"<p>EncoderWrapper object</p>"},{"location":"reference/EncoderHostScript/#encoderhostscriptgetbatchencoderstatus","title":"EncoderHostScript.getBatchEncoderStatus()","text":"<p><code>app.getEncoderHost().getBatchEncoderStatus()</code></p> <p>Note</p> <p>This functionality was added in Media Encoder 23.3</p>"},{"location":"reference/EncoderHostScript/#description_1","title":"Description","text":"<p>Returns the current status of the batch encoder.</p>"},{"location":"reference/EncoderHostScript/#returns_1","title":"Returns","text":"<p>String, one of:</p> <ul> <li><code>\"invalid\"</code></li> <li><code>\"paused\"</code></li> <li><code>\"running\"</code></li> <li><code>\"stopped\"</code></li> <li><code>\"stopping\"</code></li> </ul>"},{"location":"reference/EncoderHostScript/#encoderhostscriptgetcurrentbatchpreview","title":"EncoderHostScript.getCurrentBatchPreview()","text":"<p><code>app.getEncoderHost().getCurrentBatchPreview(inOutputPath)</code></p>"},{"location":"reference/EncoderHostScript/#description_2","title":"Description","text":"<p>Writes out the current batch preview image (<code>tiff</code> format) to the given path.</p>"},{"location":"reference/EncoderHostScript/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>inOutputPath</code> String The path to write the preview file to"},{"location":"reference/EncoderHostScript/#returns_2","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderHostScript/#encoderhostscriptgetformatlist","title":"EncoderHostScript.getFormatList()","text":"<p><code>app.getEncoderHost().getFormatList()</code></p>"},{"location":"reference/EncoderHostScript/#description_3","title":"Description","text":"<p>Returns a list of all available formats.</p>"},{"location":"reference/EncoderHostScript/#returns_3","title":"Returns","text":"<p>Array of strings</p>"},{"location":"reference/EncoderHostScript/#encoderhostscriptgetsourceinfo","title":"EncoderHostScript.getSourceInfo()","text":"<p><code>app.getEncoderHost().getSourceInfo(sourcePath)</code></p>"},{"location":"reference/EncoderHostScript/#description_4","title":"Description","text":"<p>Gets detailed info about a provided source.</p>"},{"location":"reference/EncoderHostScript/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>sourcePath</code> String The media path to get source info from"},{"location":"reference/EncoderHostScript/#returns_4","title":"Returns","text":"<p>SourceMediaInfo object</p>"},{"location":"reference/EncoderHostScript/#encoderhostscriptgetsupportedimportfiletypes","title":"EncoderHostScript.getSupportedImportFileTypes()","text":"<p><code>app.getEncoderHost().getSupportedImportFileTypes()</code></p>"},{"location":"reference/EncoderHostScript/#description_5","title":"Description","text":"<p>Returns list of all available formats.</p>"},{"location":"reference/EncoderHostScript/#returns_5","title":"Returns","text":"<p>Array of strings</p>"},{"location":"reference/EncoderHostScript/#encoderhostscriptisbatchrunning","title":"EncoderHostScript.isBatchRunning()","text":"<p><code>app.getEncoderHost().isBatchRunning()</code></p>"},{"location":"reference/EncoderHostScript/#description_6","title":"Description","text":"<p>Checks whether a batch job is running.</p>"},{"location":"reference/EncoderHostScript/#returns_6","title":"Returns","text":"<p>Boolean; <code>true</code> if a batch job is running.</p>"},{"location":"reference/EncoderHostScript/#encoderhostscriptpausebatch","title":"EncoderHostScript.pauseBatch()","text":"<p><code>app.getEncoderHost().pauseBatch()</code></p>"},{"location":"reference/EncoderHostScript/#description_7","title":"Description","text":"<p>Pauses the batch.</p>"},{"location":"reference/EncoderHostScript/#returns_7","title":"Returns","text":"<p>Boolean; always returns <code>true</code>.</p>"},{"location":"reference/EncoderHostScript/#encoderhostscriptrunbatch","title":"EncoderHostScript.runBatch()","text":"<p><code>app.getEncoderHost().runBatch()</code></p>"},{"location":"reference/EncoderHostScript/#description_8","title":"Description","text":"<p>Runs the batch</p>"},{"location":"reference/EncoderHostScript/#returns_8","title":"Returns","text":"<p>Boolean; always returns <code>true</code>.</p>"},{"location":"reference/EncoderHostScript/#encoderhostscriptstopbatch","title":"EncoderHostScript.stopBatch()","text":"<p><code>app.getEncoderHost().stopBatch()</code></p>"},{"location":"reference/EncoderHostScript/#description_9","title":"Description","text":"<p>Stops the batch.</p>"},{"location":"reference/EncoderHostScript/#returns_9","title":"Returns","text":"<p>Boolean; always returns <code>true</code>.</p>"},{"location":"reference/EncoderHostScript/#examples","title":"Examples","text":"<pre><code>var format = \"H.264\"; // e.g. H.264\nvar source = \"C:\\\\testdata\\\\testmedia1.mxf\";\nvar outputFile = \"C:\\\\testdata\\\\outputFolder\\\\output.tiff\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia1.mxf\"\n// var outputFile = \"/Users/Shared/testdata/outputFolder/output.tiff\";\n\nvar encoderHost = app.getEncoderHost();\n\nif (encoderHost) {\n  encoderHost.addEventListener(\n    \"onBatchEncoderStatusChanged\",\n    function (eventObj) {\n      $.writeln(\n        \"onBatchEncoderStatusChanged to status: \" + eventObj.batchEncoderStatus\n      );\n    }\n  );\n\n  // API \"getSourceInfo\"\n  var sourceMediaInfo = encoderHost.getSourceInfo(source);\n  if (sourceMediaInfo) {\n    // For 'sourceMediaInfo' you can now call properties of the 'SourceMediaInfo' script object, e.g.:\n    // (See detailed info in the documentation of 'SourceMediaInfo')\n    $.writeln(\n      \"Embedded description of the source: \" + sourceMediaInfo.description\n    );\n  }\n\n  // API \"getFormatList\"\n  var formatList = encoderHost.getFormatList();\n  $.writeln(\"formatList: \" + formatList);\n\n  // API \"createEncoderForFormat\"\n  var encoderWrapper = encoderHost.createEncoderForFormat(format);\n  if (encoderWrapper) {\n    // For 'encoder' you can now call properties/methods of the 'EncoderWrapper\" script object, e.g.:\n    // (See detailed info in the documentation of 'EncoderWrapper')\n    var frameRate = \"25\";\n    encoderWrapper.setFrameRate(frameRate);\n  }\n\n  // API \"isBatchRunning\"\n  var isBatchRunning = encoderHost.isBatchRunning();\n  // With the current script the return value should be 'false' since no batch (job) is running.\n  // After adding batch items (see FrontendScriptObject) and calling encoderHost.runBatch() this method returns 'true' as long as a job is running.\n  $.writeln(\"isBatchRunning: \" + isBatchRunning);\n\n  // API \"getBatchEncoderStatus\"\n  var batchStatus = encoderHost.getBatchEncoderStatus();\n  // expected value is \"stopped\", because the batch had not been started.\n  // The values are: invalid, paused, running, stopped, stopping\n  $.writeln(\"batch status is: \" + batchStatus);\n\n  // API \"runBatch\" (always returns true and therefore it's not necessary to store the result)\n  encoderHost.runBatch();\n\n  // API \"pauseBatch\" (always returns true and therefore it's not necessary to store the result)\n  encoderHost.pauseBatch();\n\n  // API \"stopBatch\" (always returns true and therefore it's not necessary to store the result)\n  encoderHost.stopBatch();\n\n  // API \"getCurrentBatchPreview\"\n  var result = encoderHost.getCurrentBatchPreview(outputFile);\n  $.writeln(\"result: \" + result);\n\n  // API \"getSupportedImportFileTypes\"\n  var supportedFileTypes = encoderHost.getSupportedImportFileTypes();\n  $.writeln(\"supportedFileTypes: \" + supportedFileTypes);\n} else {\n  $.writeln(\"encoderHost script object not defined\");\n}\n</code></pre>"},{"location":"reference/EncoderHostScript/#events","title":"Events","text":"<p>Provides the following event types for items in the batch queue:</p> <ul> <li>onItemEncodingStarted</li> <li>onAudioPreEncodeProgress</li> <li>onEncodingItemProgressUpdate</li> <li>onItemEncodeComplete</li> </ul> <p>For multiple batch items in the queue we recommend to use this event to ensure that the event types will be received for all batch items.</p> <p>It provides the following event type for the whole batch queue:</p> <ul> <li>onBatchEncoderStatusChanged</li> </ul>"},{"location":"reference/EncoderHostScript/#example","title":"Example","text":"<pre><code>// Please use this event when you have multiple batch items in the queue (added manually or via a script as below)\n// to ensure you receive all event types\nvar source_1 = \"C:\\\\testdata\\\\testmedia1.mxf\";\nvar source_2 = \"C:\\\\testdata\\\\testmedia2.mxf\";\nvar source_3 = \"C:\\\\testdata\\\\testmedia3.mxf\";\n\n// //sources for mac\n// var source_1 = \"/Users/Shared/testdata/testmedia1.mxf\"\n// var source_2 = \"/Users/Shared/testdata/testmedia2.mxf\";\n// var source_3 = \"/Users/Shared/testdata/testmedia3.mxf\";\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  // listen for batch item added event\n  frontend.addEventListener(\"onItemAddedToBatch\", function (eventObj) {\n    $.writeln(\"frontend.onItemAddedToBatch: success\");\n  });\n\n  var batchItemSuccess_1 = frontend.addItemToBatch(source_1);\n  var batchItemSuccess_2 = frontend.addItemToBatch(source_2);\n  var batchItemSuccess_3 = frontend.addItemToBatch(source_3);\n  if (batchItemSuccess_1 &amp;&amp; batchItemSuccess_2 &amp;&amp; batchItemSuccess_3) {\n    $.writeln(\n      \"Batch item added successfully for the source files \",\n      source_1 + \" , \" + source_2 + \" , \" + source_3\n    );\n\n    encoderHost = app.getEncoderHost();\n    if (encoderHost) {\n      // listen to the item encoding started event (available since 23.1.)\n      encoderHost.addEventListener(\n        \"onItemEncodingStarted\",\n        function (eventObj) {\n          $.writeln(\n            \"onItemEncodingStarted: Source File Path: \" +\n              eventObj.sourceFilePath\n          );\n          $.writeln(\n            \"onItemEncodingStarted: Output File Path: \" +\n              eventObj.outputFilePath\n          );\n        }\n      );\n\n      /* for earlier versions (23.0. or older) there's an additional step necessary to listen to the onItemEncodingStarted event\n        var exporter = app.getExporter();\n        if (exporter) {\n            exporter.addEventListener(\n                \"onItemEncodingStarted\",\n                function (eventObj) {\n                $.writeln(\"onItemEncodingStarted\");\n                }\n            );\n        }\n      */\n\n      // listen to the item encoding progress event (available since 23.1.)\n      encoderHost.addEventListener(\n        \"onEncodingItemProgressUpdate\",\n        function (eventObj) {\n          $.writeln(\n            \"onEncodingItemProgessUpdate: Encoding Progress: \" +\n              eventObj.progress\n          );\n        }\n      );\n\n      // listen to the audio pre-encoding progress event (available since 24.0.)\n      encoderHost.addEventListener(\n        \"onAudioPreEncodeProgress\",\n        function (eventObj) {\n          $.writeln(\"Audio pre-encoding info: \" + eventObj.audioInfo);\n          $.writeln(\"Audio pre-encoding progress: \" + eventObj.audioProgress);\n        },\n        false\n      );\n\n      /* for earlier versions (23.0. or older) there's an additional step necessary to listen to the onEncodingItemProgressUpdated event\n        var exporter = app.getExporter();\n        if (exporter) {\n            exporter.addEventListener(\n                \"onEncodingItemProgressUpdated\",\n                function (eventObj) {\n                $.writeln(\"onEncodingItemProgessUpdated: Encoding Progress: \" + eventObj.progress);\n                }\n            );\n        }\n      */\n\n      // listen to the item encoding complete event\n      encoderHost.addEventListener(\"onItemEncodeComplete\", function (eventObj) {\n        $.writeln(\"onItemEncodeComplete: Result: \" + eventObj.result);\n        $.writeln(\n          \"onItemEncodeComplete: Source File Path: \" + eventObj.sourceFilePath\n        );\n        $.writeln(\n          \"onItemEncodeComplete: Output File Path: \" + eventObj.outputFilePath\n        );\n      });\n\n      encoderHost.runBatch();\n    } else {\n      $.writeln(\"encoderHost not valid\");\n    }\n  } else {\n    $.writeln(\"batch item wasn't added successfully\");\n  }\n} else {\n  $.writeln(\"frontend not valid\");\n}\n</code></pre>"},{"location":"reference/EncoderHostScript/#onaudiopreencodeprogress","title":"onAudioPreEncodeProgress","text":"<p><code>app.getEncoderHost().addEventListener(\"onAudioPreEncodeProgress\")</code></p> <p>Note</p> <p>This functionality was added in Media Encoder 24.0</p>"},{"location":"reference/EncoderHostScript/#description_10","title":"Description","text":"<p>Notify when the audio pre-encode progress changes.</p>"},{"location":"reference/EncoderHostScript/#properties","title":"Properties","text":"Property Type Description <code>audioInfo</code> String The audio pre-encoding info <code>audioProgress</code> Float The audio pre-encoding progress"},{"location":"reference/EncoderHostScript/#onbatchencoderstatuschanged","title":"onBatchEncoderStatusChanged","text":"<p><code>app.getEncoderHost().addEventListener(\"onBatchEncoderStatusChanged\")</code></p> <p>Note</p> <p>This functionality was added in Media Encoder 23.3</p>"},{"location":"reference/EncoderHostScript/#description_11","title":"Description","text":"<p>Notify when the batch encoder status has changed. Get the new status from the <code>batchEncoderStatus</code> property.</p>"},{"location":"reference/EncoderHostScript/#properties_1","title":"Properties","text":"Property Type Description <code>batchEncoderStatus</code> String Returns the status of the batch encoder, when the event was sent. The values are:<ul><li><code>\"invalid\"</code></li><li><code>\"paused\"</code></li><li><code>\"running\"</code></li><li><code>\"stopped\"</code></li><li><code>\"stopping\"</code></li></ul>"},{"location":"reference/EncoderHostScript/#onencodingitemprogressupdate","title":"onEncodingItemProgressUpdate","text":"<p><code>app.getEncoderHost().addEventListener(\"onEncodingItemProgressUpdate\")</code></p> <p>Note</p> <p>This functionality was added in Media Encoder 23.1</p>"},{"location":"reference/EncoderHostScript/#description_12","title":"Description","text":"<p>Notify of the batch item encoding progress.</p>"},{"location":"reference/EncoderHostScript/#properties_2","title":"Properties","text":"Property Type Description <code>progress</code> Float Returns the encoding progress between 0 and 1."},{"location":"reference/EncoderHostScript/#onitemencodecomplete","title":"onItemEncodeComplete","text":"<p><code>app.getEncoderHost().addEventListener(\"onItemEncodeComplete\")</code></p>"},{"location":"reference/EncoderHostScript/#description_13","title":"Description","text":"<p>Notify when the batch item has been encoded.</p>"},{"location":"reference/EncoderHostScript/#properties_3","title":"Properties","text":"Property Type Description <code>outputFilePath</code> String Returns the path of the output file. <code>result</code> String Returns the encoding result, <code>True</code> or <code>False</code>. <code>sourceFilePath</code> String Returns the path of the source file."},{"location":"reference/EncoderHostScript/#onitemencodingstarted","title":"onItemEncodingStarted","text":"<p><code>app.getEncoderHost().addEventListener(\"onItemEncodingStarted\")</code></p> <p>Note</p> <p>This functionality was added in Media Encoder 23.1</p>"},{"location":"reference/EncoderHostScript/#description_14","title":"Description","text":"<p>Notify when the batch item encoding started.</p>"},{"location":"reference/EncoderHostScript/#properties_4","title":"Properties","text":"Property Type Description <code>outputFilePath</code> String Returns the path of the output file. <code>sourceFilePath</code> String Returns the path of the source file."},{"location":"reference/EncoderWrapper/","title":"EncoderWrapper Object","text":"<p><code>app.getFrontend().addDLToBatch(...)</code> <code>app.getFrontend().addFileToBatch(...)</code> <code>app.getFrontend().addTeamProjectsItemToBatch(...)</code> <code>app.getFrontend().exportItem(...)</code> <code>app.getFrontend().stitchFiles(...)</code></p> <p>Queue item object to set encode properties</p>"},{"location":"reference/EncoderWrapper/#example","title":"Example","text":"<pre><code>var format = \"\";\nvar source = \"C:\\\\testdata\\\\testmedia4.mp4\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia4.mp4\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  // Either format or preset can be empty, output is optional\n  var encoderWrapper = frontend.addFileToBatch(source, format, preset);\n\n  if (encoderWrapper) {\n    $.writeln(\n      \"Frontend script engine added the source file using addFileToBatch-\",\n      source,\n      \" successfully\"\n    );\n\n    $.writeln(\"width :\", encoderWrapper.outputWidth);\n    $.writeln(\"height:\", encoderWrapper.outputHeight);\n    $.writeln(\"outputFiles:\", encoderWrapper.outputFiles);\n\n    //input value is string please use e.g. \"25\"\n    encoderWrapper.setFrameRate(\"25\");\n\n    //int, 0-Entire, 1-InToOut, 2-WorkArea, 3-Custom, 4:UseDefault\n    encoderWrapper.setWorkArea(2, 0.0, 1.0);\n\n    var usePreviewFiles = true;\n    encoderWrapper.setUsePreviewFiles(usePreviewFiles);\n\n    var useMaximumRenderQuality = true;\n    encoderWrapper.setUseMaximumRenderQuality(useMaximumRenderQuality);\n\n    var useFrameBlending = true;\n    encoderWrapper.setUseFrameBlending(useFrameBlending);\n\n    // int-0-FrameSampling, 1-FrameBlending, 2-OpticalFlow\n    encoderWrapper.setTimeInterpolationType(1);\n\n    // be aware that this method first letter is upper case\n    var includeSourceXMP = true;\n    encoderWrapper.SetIncludeSourceXMP(includeSourceXMP);\n\n    var includeSourceCuePoints = false;\n    encoderWrapper.setIncludeSourceCuePoints(includeSourceCuePoints);\n\n    var cropState = true;\n    encoderWrapper.setCropState(cropState);\n\n    //int, 0-ScaleToFit, 1-ScaleToFitBeforeCrop, 2-SetAsOutputSize, 3-ScaleToFill, 4-ScaleToFillBeforeCrop, 5-StretchToFill, 6-StretchToFillBeforeCrop\",\n    encoderWrapper.setCropType(4);\n\n    //int, 0-ScaleToFit, 1-ScaleToFitBeforeCrop, 2-SetAsOutputSize, 3-ScaleToFill, 4-ScaleToFillBeforeCrop, 5-StretchToFill, 6-StretchToFillBeforeCrop\",\n    encoderWrapper.setScaleType(4);\n\n    // rotate clockwise, input values will be transformed into [0 - 360], so -90 is equal to 270\n    encoderWrapper.setRotation(180);\n\n    //left, top, right, bottom\n    encoderWrapper.setCropOffsets(10, 20, 10, 20);\n\n    //width and height\n    encoderWrapper.setOutputFrameSize(1200, 800);\n\n    // default is off - deprecated\n    //encoderWrapper.setCuePointData();\n\n    var encoderHostWrapper = app.getEncoderHost();\n    if (encoderHostWrapper) {\n      encoderHostWrapper.runBatch();\n    }\n  } else {\n    $.writeln(\"encoderWrapper is not valid\");\n  }\n} else {\n  $.writeln(\"frontend obj is not valid\");\n}\n</code></pre>"},{"location":"reference/EncoderWrapper/#attributes","title":"Attributes","text":""},{"location":"reference/EncoderWrapper/#encoderwrapperoutputfiles","title":"EncoderWrapper.outputFiles","text":"<p><code>app.getFrontend().exportItem(...).outputFiles</code></p>"},{"location":"reference/EncoderWrapper/#description","title":"Description","text":"<p>Gets the list of files the encode generated.</p>"},{"location":"reference/EncoderWrapper/#returns","title":"Returns","text":"<p>Array of strings</p>"},{"location":"reference/EncoderWrapper/#encoderwrapperoutputheight","title":"EncoderWrapper.outputHeight","text":"<p><code>app.getFrontend().exportItem(...).outputHeight</code></p>"},{"location":"reference/EncoderWrapper/#description_1","title":"Description","text":"<p>Gets the height of the encoded output file.</p>"},{"location":"reference/EncoderWrapper/#returns_1","title":"Returns","text":"<p>Float</p>"},{"location":"reference/EncoderWrapper/#encoderwrapperoutputwidth","title":"EncoderWrapper.outputWidth","text":"<p><code>app.getFrontend().exportItem(...).outputWidth</code></p>"},{"location":"reference/EncoderWrapper/#description_2","title":"Description","text":"<p>Gets the width of the encoded output file.</p>"},{"location":"reference/EncoderWrapper/#returns_2","title":"Returns","text":"<p>Float</p>"},{"location":"reference/EncoderWrapper/#methods","title":"Methods","text":""},{"location":"reference/EncoderWrapper/#encoderwrappersetincludesourcexmp","title":"EncoderWrapper.SetIncludeSourceXMP()","text":"<p><code>app.getFrontend().exportItem(...).SetIncludeSourceXMP(includeSourceXMP)</code></p>"},{"location":"reference/EncoderWrapper/#description_3","title":"Description","text":"<p>Toggle the inclusion of source XMP.</p>"},{"location":"reference/EncoderWrapper/#parameters","title":"Parameters","text":"Parameter Type Description <code>includeSourceXMP</code> Boolean Whether to include source XMP"},{"location":"reference/EncoderWrapper/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappergetencodeprogress","title":"EncoderWrapper.getEncodeProgress()","text":"<p><code>app.getFrontend().exportItem(...).getEncodeProgress()</code></p>"},{"location":"reference/EncoderWrapper/#description_4","title":"Description","text":"<p>Returns the encode progress as percentage</p>"},{"location":"reference/EncoderWrapper/#returns_4","title":"Returns","text":"<p>Integer</p>"},{"location":"reference/EncoderWrapper/#encoderwrappergetencodetime","title":"EncoderWrapper.getEncodeTime()","text":"<p><code>app.getFrontend().exportItem(...).getEncodeTime()</code></p>"},{"location":"reference/EncoderWrapper/#description_5","title":"Description","text":"<p>Return the encode time in milliseconds</p>"},{"location":"reference/EncoderWrapper/#returns_5","title":"Returns","text":"<p>Float</p>"},{"location":"reference/EncoderWrapper/#encoderwrappergetlogoutput","title":"EncoderWrapper.getLogOutput()","text":"<p><code>app.getFrontend().exportItem(...).getLogOutput()</code></p> <p>Note</p> <p>This functionality was added in Media Encoder 23.2</p>"},{"location":"reference/EncoderWrapper/#description_6","title":"Description","text":"<p>Returns the log output including possible warnings and errors.</p>"},{"location":"reference/EncoderWrapper/#returns_6","title":"Returns","text":"<p>String</p>"},{"location":"reference/EncoderWrapper/#example_1","title":"Example","text":"<pre><code>var format = \"H.264\";\nvar source = \"C:\\\\testdata\\\\testmedia4.mp4\";\nvar preset = \"C:\\\\testdata\\\\HighQuality1080_HD.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia4.mp4\"\n// var preset = \"/Users/Shared/testdata/HighQuality1080_HD.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  /**\n   * getLogOutPut() returns a string in JSON format containing the possible errors and warnings as well as the summary of the batch item\n   * that is added to the queue.\n   *\n   * The getLogOutput() method is implemented in the EncoderWrapperScriptObject.\n   * You can use getLogOutput() method when you have used one of these following methods:\n   *\n   * FrontEndScriptObject:\n   * - addFileToBatch()\n   * - addDLToBatch()\n   * - addTeamProjectsToBatch()\n   * - stitchFiles()\n   * In Addition it is possible to get the batch item status with\n   * encoderWrapper.addListener(\"onStatusChanged\"){...} Here you will get \"Done!\", \"Failed!\", \"Stopped!\"\n   *\n   * ExportScriptObject:\n   * - export()\n   * - getSourceMediaInfo()\n   * In Addition it is possible to get the batch item status with\n   * exporter.addListener(\"OnBatchItemStatusChanged\"){...} Here you will get integer values see ExportScriptObject for the details\n   *\n   * EncoderHostWrapper:\n   * - createEncoderFormat()\n   *\n   * Output format is\n   *    {\n   *        \"time\": \"2023-01-16T12:18:36.617946\",\n   *        \"error\": \"\",\n   *        \"summary\": []\n   *    }\n   */\n\n  var encoderWrapper = frontend.addFileToBatch(\n    source,\n    format,\n    preset,\n    destination\n  );\n  if (encoderWrapper) {\n    $.writeln(\"Batch item is successfully added to the queue: \", source);\n\n    encoderWrapper.addEventListener(\"onEncodeFinished\", function (eventObj) {\n      // return the log output in JSON Format\n      $.writeln(encoderWrapper.getLogOutput());\n    });\n\n    // get encoder host to run batch\n    var encoderHost = app.getEncoderHost();\n    if (encoderHost) {\n      encoderHost.runBatch();\n    } else {\n      $.writeln(\"EncoderHostScriptObject is not valid\");\n    }\n  } else {\n    $.writeln(\n      \"EncoderWrapperScriptObject is not valid - batch item wasn't added successfully\"\n    );\n  }\n} else {\n  $.writeln(\"FrontendScriptObject is not valid\");\n}\n</code></pre>"},{"location":"reference/EncoderWrapper/#encoderwrappergetmissingassets","title":"EncoderWrapper.getMissingAssets()","text":"<p><code>app.getFrontend().exportItem(...).getMissingAssets(includeSource, includeOutput)</code></p>"},{"location":"reference/EncoderWrapper/#description_7","title":"Description","text":"<p>Returns a list of missing assets</p>"},{"location":"reference/EncoderWrapper/#parameters_1","title":"Parameters","text":"Parameter Type Description includeSource Boolean Whether to include the source group includeOutput Boolean Whether to include the output"},{"location":"reference/EncoderWrapper/#returns_7","title":"Returns","text":"<p>Array of strings</p>"},{"location":"reference/EncoderWrapper/#encoderwrappergetpresetlist","title":"EncoderWrapper.getPresetList()","text":"<p><code>app.getFrontend().exportItem(...).getPresetList()</code></p>"},{"location":"reference/EncoderWrapper/#description_8","title":"Description","text":"<p>Returns the presets available for the assigned format</p>"},{"location":"reference/EncoderWrapper/#returns_8","title":"Returns","text":"<p>Array of strings</p>"},{"location":"reference/EncoderWrapper/#example_2","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia4.mp4\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia4.mp4\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n\nvar format = \"\";\nvar frontend = app.getFrontend();\nif (frontend) {\n  var encoderWrapper = frontend.addFileToBatch(source, format, preset);\n\n  if (encoderWrapper) {\n    $.writeln(source, \" has been added successfully\");\n\n    /**if you set the format parameter but no presetfilepath then you will\n     * get all related presets to this specific format.\n     *\n     * If you set the presetfilepath but no format, then the\n     * format will be set automatically that matches the current preset */\n\n    var presetList = encoderWrapper.getPresetList();\n    for (var index = 0; index &lt; presetList.length; index++) {\n      $.writeln(presetList[index]);\n    }\n  } else {\n    $.writeln(\"encoderWrapper object is not valid\");\n  }\n} else {\n  $.writeln(\"Frontend object is not valid\");\n}\n</code></pre>"},{"location":"reference/EncoderWrapper/#encoderwrapperloadformat","title":"EncoderWrapper.loadFormat()","text":"<p><code>app.getFrontend().exportItem(...).loadFormat(format)</code></p>"},{"location":"reference/EncoderWrapper/#description_9","title":"Description","text":"<p>Changes the format for the batch item</p>"},{"location":"reference/EncoderWrapper/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>format</code> String The format to change to, e.g. <code>\"H.264\"</code>"},{"location":"reference/EncoderWrapper/#returns_9","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#example_3","title":"Example","text":"<pre><code>var format = \"\";\nvar source = \"C:\\\\testdata\\\\testmedia4.mp4\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia4.mp4\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  var encoderWrapper = frontend.addFileToBatch(source, format, preset);\n  if (encoderWrapper) {\n    encoderWrapper.loadFormat(\"MP3\");\n  } else {\n    $.writeln(\"EncoderWrapper object is not valid\");\n  }\n} else {\n  $.writeln(\"Frontend object is not valid\");\n}\n</code></pre>"},{"location":"reference/EncoderWrapper/#encoderwrapperloadpreset","title":"EncoderWrapper.loadPreset()","text":"<p><code>app.getFrontend().exportItem(...).loadPreset(presetPath)</code></p>"},{"location":"reference/EncoderWrapper/#description_10","title":"Description","text":"<p>Loads and assigns the preset to the batch item</p>"},{"location":"reference/EncoderWrapper/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>presetPath</code> String The path to load presets from"},{"location":"reference/EncoderWrapper/#returns_10","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#example_4","title":"Example","text":"<pre><code>var format = \"\";\nvar source = \"C:\\\\testdata\\\\testmedia4.mp4\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\n\nvar differentPreset = \"C:\\\\testdata\\\\High Quality 1080 HD.epr\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia4.mp4\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n// var differentPreset = \"/Users/Shared/testdata/High Quality 1080 HD.epr\";\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  // Either format name or presetPath can be empty, output filepath is optional\n  var encoderWrapper = frontend.addFileToBatch(source, format, preset);\n  if (encoderWrapper) {\n    encoderWrapper.loadPreset(differentPreset);\n  } else {\n    $.writeln(\"EncoderWrapper object is not valid\");\n  }\n} else {\n  $.writeln(\"Frontend object is not valid\");\n}\n</code></pre>"},{"location":"reference/EncoderWrapper/#encoderwrappersetcropoffsets","title":"EncoderWrapper.setCropOffsets()","text":"<p><code>app.getFrontend().exportItem(...).setCropOffsets(left, top, right, bottom)</code></p>"},{"location":"reference/EncoderWrapper/#description_11","title":"Description","text":"<p>Sets the crop offsets</p>"},{"location":"reference/EncoderWrapper/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>left</code> Unsigned int The left crop offset <code>top</code> Unsigned int The top crop offset <code>right</code> Unsigned int The right crop offset <code>bottom</code> Unsigned int The bottom crop offset"},{"location":"reference/EncoderWrapper/#returns_11","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetcropstate","title":"EncoderWrapper.setCropState()","text":"<p><code>app.getFrontend().exportItem(...).setCropState(cropState)</code></p>"},{"location":"reference/EncoderWrapper/#description_12","title":"Description","text":"<p>Sets the crop state</p>"},{"location":"reference/EncoderWrapper/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>cropState</code> Boolean The crop state to set to"},{"location":"reference/EncoderWrapper/#returns_12","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetcroptype","title":"EncoderWrapper.setCropType()","text":"<p><code>app.getFrontend().exportItem(...).setCropType(cropType)</code></p>"},{"location":"reference/EncoderWrapper/#description_13","title":"Description","text":"<p>Sets the crop type</p>"},{"location":"reference/EncoderWrapper/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>cropType</code> Unsigned int <ul><li>0 \u2013 <code>ScaleToFit</code></li><li>1 \u2013 <code>ScaleToFitBeforeCrop</code></li><li>2 \u2013 <code>SetAsOutputSize</code></li><li>3 \u2013 <code>ScaleToFill</code></li><li>4 \u2013 <code>ScaleToFillBeforeCrop</code></li><li>5 \u2013 <code>StretchToFill</code></li><li>6 \u2013 <code>StretchToFillBeforeCrop</code>"},{"location":"reference/EncoderWrapper/#returns_13","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetcuepointdata","title":"EncoderWrapper.setCuePointData()","text":"<p><code>app.getFrontend().exportItem(...).setCuePointData(inCuePointsFilePath)</code></p>"},{"location":"reference/EncoderWrapper/#description_14","title":"Description","text":"<p>Sets the cue point data</p>"},{"location":"reference/EncoderWrapper/#parameters_7","title":"Parameters","text":"Parameter Type Description <code>inCuePointsFilePath</code> string File path for the data to set"},{"location":"reference/EncoderWrapper/#returns_14","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetframerate","title":"EncoderWrapper.setFrameRate()","text":"<p><code>app.getFrontend().exportItem(...).setFrameRate(framerate)</code></p>"},{"location":"reference/EncoderWrapper/#description_15","title":"Description","text":"<p>Sets the frame rate for the batch item</p>"},{"location":"reference/EncoderWrapper/#parameters_8","title":"Parameters","text":"Parameter Type Description <code>framerate</code> String The frame rate, as a string e.g. <code>\"24\"</code>"},{"location":"reference/EncoderWrapper/#returns_15","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetincludesourcecuepoints","title":"EncoderWrapper.setIncludeSourceCuePoints()","text":"<p><code>app.getFrontend().exportItem(...).setIncludeSourceCuePoints(includeSourceCuePoints)</code></p>"},{"location":"reference/EncoderWrapper/#description_16","title":"Description","text":"<p>Toggle the inclusion of cue points</p>"},{"location":"reference/EncoderWrapper/#parameters_9","title":"Parameters","text":"Parameter Type Description <code>includeSourceCuePoints</code> Boolean Whether to include source cue points"},{"location":"reference/EncoderWrapper/#returns_16","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetoutputframesize","title":"EncoderWrapper.setOutputFrameSize()","text":"<p><code>app.getFrontend().exportItem(...).setOutputFrameSize(width, height)</code></p>"},{"location":"reference/EncoderWrapper/#description_17","title":"Description","text":"<p>Sets the output frame size</p>"},{"location":"reference/EncoderWrapper/#parameters_10","title":"Parameters","text":"Parameter Type Description <code>width</code> Unsigned int Frame width <code>height</code> Unsigned int Frame height"},{"location":"reference/EncoderWrapper/#returns_17","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetrotation","title":"EncoderWrapper.setRotation()","text":"<p><code>app.getFrontend().exportItem(...).setRotation(rotationValue)</code></p>"},{"location":"reference/EncoderWrapper/#description_18","title":"Description","text":"<p>Sets the rotation (in a 360 degree system)</p>"},{"location":"reference/EncoderWrapper/#parameters_11","title":"Parameters","text":"Parameter Type Description <code>rotationValue</code> Float Rotation value, in the range <code>[0.0..360.0]</code>"},{"location":"reference/EncoderWrapper/#returns_18","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetscaletype","title":"EncoderWrapper.setScaleType()","text":"<p><code>app.getFrontend().exportItem(...).setScaleType(scaleType)</code></p>"},{"location":"reference/EncoderWrapper/#description_19","title":"Description","text":"<p>Sets the scale type</p>"},{"location":"reference/EncoderWrapper/#parameters_12","title":"Parameters","text":"Parameter Type Description <code>scaleType</code> Unsigned int <ul><li>0 \u2013 <code>ScaleToFit</code></li><li>1 \u2013 <code>ScaleToFitBeforeCrop</code></li><li>2 \u2013 <code>SetAsOutputSize</code></li><li>3 \u2013 <code>ScaleToFill</code></li><li>4 \u2013 <code>ScaleToFillBeforeCrop</code></li><li>5 \u2013 <code>StretchToFill</code></li><li>6 \u2013 <code>StretchToFillBeforeCrop</code>"},{"location":"reference/EncoderWrapper/#returns_19","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersettimeinterpolationtype","title":"EncoderWrapper.setTimeInterpolationType()","text":"<p><code>app.getFrontend().exportItem(...).setTimeInterpolationType(interpolationType)</code></p>"},{"location":"reference/EncoderWrapper/#description_20","title":"Description","text":"<p>Set the time interpolation type</p>"},{"location":"reference/EncoderWrapper/#parameters_13","title":"Parameters","text":"Parameter Type Description <code>interpolationType</code> Unsigned int <ul><li>0 \u2013 FrameSampling</li><li>1 \u2013 FrameBlending</li><li>2 \u2013 OpticalFlow</li></ul>"},{"location":"reference/EncoderWrapper/#returns_20","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetuseframeblending","title":"EncoderWrapper.setUseFrameBlending()","text":"<p><code>app.getFrontend().exportItem(...).setUseFrameBlending(useFrameBlending)</code></p>"},{"location":"reference/EncoderWrapper/#description_21","title":"Description","text":"<p>Toggle the use of frame blending.</p>"},{"location":"reference/EncoderWrapper/#parameters_14","title":"Parameters","text":"Parameter Type Description <code>useFrameBlending</code> Boolean Whether to use frame blending"},{"location":"reference/EncoderWrapper/#returns_21","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetusemaximumrenderquality","title":"EncoderWrapper.setUseMaximumRenderQuality()","text":"<p><code>app.getFrontend().exportItem(...).setUseMaximumRenderQuality(useMaximumRenderQuality)</code></p>"},{"location":"reference/EncoderWrapper/#description_22","title":"Description","text":"<p>Toggle the use of maximum render quality.</p>"},{"location":"reference/EncoderWrapper/#parameters_15","title":"Parameters","text":"Parameter Type Description <code>useMaximumRenderQuality</code> Boolean Whether to use maximum render quality"},{"location":"reference/EncoderWrapper/#returns_22","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetusepreviewfiles","title":"EncoderWrapper.setUsePreviewFiles()","text":"<p><code>app.getFrontend().exportItem(...).setUsePreviewFiles(usePreviewFiles)</code></p>"},{"location":"reference/EncoderWrapper/#description_23","title":"Description","text":"<p>Toggle the use of previews files.</p>"},{"location":"reference/EncoderWrapper/#parameters_16","title":"Parameters","text":"Parameter Type Description <code>usePreviewFiles</code> Boolean Whether to use preview files"},{"location":"reference/EncoderWrapper/#returns_23","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetworkarea","title":"EncoderWrapper.setWorkArea()","text":"<p><code>app.getFrontend().exportItem(...).setWorkArea(workAreaType, startTime, endTime)</code></p>"},{"location":"reference/EncoderWrapper/#description_24","title":"Description","text":"<p>Sets the work area type, start and end time for the batch item.</p>"},{"location":"reference/EncoderWrapper/#parameters_17","title":"Parameters","text":"Parameter Type Description <code>workAreaType</code> Unsigned int <ul><li>0 \u2013 Entire</li><li>1 \u2013 InToOut</li><li>2 \u2013 WorkArea</li><li>3 \u2013 Custom</li><li>4 \u2013 UseDefault</li></ul> <code>startTime</code> Float Start time <code>endTime</code> Float End time"},{"location":"reference/EncoderWrapper/#returns_24","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#encoderwrappersetworkareainticks","title":"EncoderWrapper.setWorkAreaInTicks()","text":"<p><code>app.getFrontend().exportItem(...).setWorkAreaInTicks(workAreaType, startTime, endTime)</code></p> <p>Note</p> <p>This functionality was added in Media Encoder 23.3</p>"},{"location":"reference/EncoderWrapper/#description_25","title":"Description","text":"<p>Sets the work area type, start and end time in ticks for the batch item</p>"},{"location":"reference/EncoderWrapper/#parameters_18","title":"Parameters","text":"Parameter Type Description <code>workAreaType</code> Unsigned int <ul><li>0 \u2013 Entire</li><li>1 \u2013 InToOut</li><li>2 \u2013 WorkArea</li><li>3 \u2013 Custom</li><li>4 \u2013 UseDefault</li></ul> <code>startTime</code> Float Start time, in ticks <code>endTime</code> Float End time, in ticks"},{"location":"reference/EncoderWrapper/#returns_25","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#example_5","title":"Example","text":"<pre><code>var format = \"H.264\";\n\nvar source = \"C:\\\\testdata\\\\testmedia4.mp4\";\nvar preset = \"C:\\\\testdata\\\\HD 720p.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia4.mp4\"\n// var preset = \"/Users/Shared/testdata/HD 720p.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\n// The value of ticksPerSecond is predefined in premiere pro and ame.\n// For more information please have a look into https://ppro-scripting.docsforadobe.dev/other/time.html\nvar ticksPerSecond = 254016000000;\nvar startTimeInTicks = 20 * ticksPerSecond;\nvar timeToAddInTicks = 30 * ticksPerSecond;\n\nvar startTimeinTicksStr = String(startTimeInTicks);\nvar endTimeInTicksStr = String(timeToAddInTicks);\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  var encoderWrapper = frontend.addFileToBatch(\n    source,\n    format,\n    preset,\n    destination\n  );\n  if (encoderWrapper) {\n    $.writeln(\"workarea start time: \", startTimeinTicksStr);\n    $.writeln(\"workarea end time: \", endTimeInTicksStr);\n    encoderWrapper.setWorkAreaInTicks(\n      2,\n      startTimeinTicksStr,\n      endTimeInTicksStr\n    );\n  } else {\n    $.writeln(\"encoderWrapper is not valid\");\n  }\n  var encoderHost = app.getEncoderHost();\n  if (encoderHost) {\n    encoderHost.runBatch();\n  } else {\n    $.writeln(\"encoderHost is not valid\");\n  }\n} else {\n  $.writeln(\"frontend is not valid\");\n}\n</code></pre>"},{"location":"reference/EncoderWrapper/#encoderwrappersetxmpdata","title":"EncoderWrapper.setXMPData()","text":"<p><code>app.getFrontend().exportItem(...).setXMPData(templateXMPFilePath)</code></p>"},{"location":"reference/EncoderWrapper/#description_26","title":"Description","text":"<p>Sets XMP data to given template</p>"},{"location":"reference/EncoderWrapper/#parameters_19","title":"Parameters","text":"Parameter Type Description <code>templateXMPFilePath</code> String File path to the XMP template"},{"location":"reference/EncoderWrapper/#returns_26","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/EncoderWrapper/#events","title":"Events","text":"<p>An event to inform of encode progress and completion.</p>"},{"location":"reference/EncoderWrapper/#example_6","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar exporter = app.getExporter();\nif (exporter) {\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n  if (encoderWrapper) {\n    encoderWrapper.addEventListener(\n      \"onEncodeFinished\",\n      function (eventObj) {\n        $.writeln(\"Encoding result: \" + eventObj.result);\n      },\n      false\n    );\n    encoderWrapper.addEventListener(\n      \"onEncodeProgress\",\n      function (eventObj) {\n        $.writeln(\"Encoding progress: \" + eventObj.result);\n      },\n      false\n    );\n\n    // listen to the audio pre-encoding progress event (available since 24.0.)\n    encoderWrapper.addEventListener(\n      \"onAudioPreEncodeProgress\",\n      function (eventObj) {\n        $.writeln(\"Audio pre-encoding info: \" + eventObj.audioInfo);\n        $.writeln(\"Audio pre-encoding progress: \" + eventObj.audioProgress);\n      },\n      false\n    );\n  }\n}\n</code></pre>"},{"location":"reference/EncoderWrapper/#onaudiopreencodeprogress","title":"onAudioPreEncodeProgress","text":"<p><code>app.getFrontend().exportItem(...).addEventListener(\"onAudioPreEncodeProgress\")</code></p> <p>Note</p> <p>This functionality was added in Media Encoder 24.0</p>"},{"location":"reference/EncoderWrapper/#description_27","title":"Description","text":"<p>Notify when the audio pre-encode progress changes.</p>"},{"location":"reference/EncoderWrapper/#properties","title":"Properties","text":"Property Type Description <code>audioInfo</code> String Returns the audio pre-encoding info <code>audioProgress</code> String Returns the audio pre-encoding progress"},{"location":"reference/EncoderWrapper/#onencodefinished","title":"onEncodeFinished","text":"<p><code>app.getFrontend().exportItem(...).addEventListener(\"onEncodeFinished\")</code></p>"},{"location":"reference/EncoderWrapper/#description_28","title":"Description","text":"<p>Notify when the batch item has been encoded.</p>"},{"location":"reference/EncoderWrapper/#properties_1","title":"Properties","text":"Property Type Description <code>result</code> String Returns the encoding result, one of:<ul><li><code>\"Done!\"</code></li><li><code>\"Failed!\"</code></li><li><code>\"Stopped!\"</code></li></ul>"},{"location":"reference/EncoderWrapper/#onencodeprogress","title":"onEncodeProgress","text":"<p><code>app.getFrontend().exportItem(...).addEventListener(\"onEncodeProgress\")</code></p>"},{"location":"reference/EncoderWrapper/#description_29","title":"Description","text":"<p>Notify when the batch item encode progress changes.</p>"},{"location":"reference/EncoderWrapper/#properties_2","title":"Properties","text":"Property Type Description <code>result</code> String Returns the encoding result, in the range <code>[0..100]</code>"},{"location":"reference/ExporterScript/","title":"ExporterScript Object","text":"<p><code>app.getExporter()</code></p> <p>Contains several encoding methods.</p>"},{"location":"reference/ExporterScript/#attributes","title":"Attributes","text":""},{"location":"reference/ExporterScript/#exporterscriptelapsedmilliseconds","title":"ExporterScript.elapsedMilliseconds","text":"<p><code>app.getExporter().elapsedMilliseconds</code></p>"},{"location":"reference/ExporterScript/#description","title":"Description","text":"<p>Returns the encode time in milliseconds.</p>"},{"location":"reference/ExporterScript/#type","title":"Type","text":"<p>Float</p>"},{"location":"reference/ExporterScript/#example","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar exporter = app.getExporter();\nif (exporter) {\n  exporter.exportItem(source, destination, preset);\n  exporter.addEventListener(\"onEncodeComplete\", function (eventObj) {\n    // We can get the encoding time from the event or from the exporter\n    $.writeln(\n      \"Encode Complete Time (in milli seconds): \" + eventObj.encodeCompleteTime\n    );\n\n    var encodeCompleteTimeMilliseconds = exporter.elapsedMilliseconds;\n    $.writeln(\n      \"Encode Complete Time alt (in milli seconds): \" +\n        encodeCompleteTimeMilliseconds\n    );\n  });\n}\n</code></pre>"},{"location":"reference/ExporterScript/#exporterscriptencodeid","title":"ExporterScript.encodeID","text":"<p><code>app.getExporter().encodeID</code></p>"},{"location":"reference/ExporterScript/#description_1","title":"Description","text":"<p>Returns the current encode item ID as string.</p>"},{"location":"reference/ExporterScript/#type_1","title":"Type","text":"<p>String</p>"},{"location":"reference/ExporterScript/#example_1","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar exporter = app.getExporter();\nif (exporter) {\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n  var encodeID = exporter.encodeID;\n  $.writeln(\"Encode ID: \" + encodeID);\n}\n</code></pre>"},{"location":"reference/ExporterScript/#methods","title":"Methods","text":""},{"location":"reference/ExporterScript/#exporterscriptexportgroup","title":"ExporterScript.exportGroup()","text":"<p><code>app.getExporter().exportGroup(sourcePath, outputPath, presetsPath, matchSource)</code></p>"},{"location":"reference/ExporterScript/#description_2","title":"Description","text":"<p>Export the source with the provided list of presets.</p>"},{"location":"reference/ExporterScript/#parameters","title":"Parameters","text":"Parameter Type Description <code>sourcePath</code> String Media path (Premiere Pro projects aren't supported). <code>outputPath</code> String If <code>outputPath</code> is empty, then the output file location will be generated based on the source location. <code>presetsPath</code> String Multiple preset paths can be provided separated via a <code>|</code> (e.g.\u00a0<code>\"path1|path2|path3\"</code>) <code>matchSource</code> Boolean Optional. Default value is <code>false</code>."},{"location":"reference/ExporterScript/#returns","title":"Returns","text":"<p>Boolean; <code>true</code> in case of success.</p>"},{"location":"reference/ExporterScript/#example_2","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset_1 = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar preset_2 = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 25p.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset_1 = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var preset_2 = \"/Users/Shared/testdata/XDCAMHD 50 PAL 25p.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar matchSourceSettings = false; // optional\nvar presets = preset_1 + \"|\" + preset_2;\n\nvar exporter = app.getExporter();\nif (exporter) {\n  exporter.addEventListener(\n    \"onEncodeComplete\",\n    function (eventObj) {\n      // We should arrive here two times (for every preset we have one batch item)\n      $.writeln(\n        \"Encode Complete Status (always true): \" + eventObj.encodeCompleteStatus\n      );\n      // We encode both batch items in parallel and so we don't really get the exact time for each batch item\n      // When we arrive here the second time we get the total encoding time for both batch items (the first\n      // could be ignored)\n      $.writeln(\n        \"Encode Complete Time (in milliseconds): \" + eventObj.encodeCompleteTime\n      );\n    },\n    false\n  );\n\n  exporter.addEventListener(\n    \"onError\",\n    function (eventObj) {\n      $.writeln(\"Error while encoding\");\n    },\n    false\n  );\n\n  exporter.addEventListener(\n    \"onBatchItemStatusChanged\",\n    function (eventObj) {\n      $.writeln(\"Batch group index: \" + eventObj.groupIndex);\n      $.writeln(\"Batch item index: \" + eventObj.itemIndex);\n      /*\n        Possible status values:\n        kBatchItemStatus_Waiting = 0,\n        kBatchItemStatus_Done,\n        kBatchItemStatus_Failed,\n        kBatchItemStatus_Skipped,\n        kBatchItemStatus_Encoding,\n        kBatchItemStatus_Paused,\n        kBatchItemStatus_Stopped,\n        kBatchItemStatus_Any,\n        kBatchItemStatus_AutoStart,\n        kBatchItemStatus_Done_Warning,\n        kBatchItemStatus_WatchFolderWaiting\n        */\n      $.writeln(\"Batch item status: \" + eventObj.status);\n    },\n    false\n  );\n\n  exporter.addEventListener(\n    \"onItemEncodingStarted\",\n    function (eventObj) {\n      $.writeln(\"Encoding started for batch item.\");\n    },\n    false\n  );\n\n  exporter.addEventListener(\n    \"onMediaInfoCreated\",\n    function (eventObj) {\n      $.writeln(\"Media info created\");\n    },\n    false\n  );\n\n  exporter.addEventListener(\n    \"onPostProcessListInitialized\",\n    function (eventObj) {\n      $.writeln(\"Post process list has been initialized.\");\n    },\n    false\n  );\n\n  var encodingPreperationSuccess = exporter.exportGroup(\n    source,\n    destination,\n    presets,\n    matchSourceSettings\n  );\n  // Without all optional arguments:\n  // var encodingPreperationSuccess = exporter.exportGroup(source, destination, presets);\n\n  $.writeln(\n    \"Encoding preparations were successful: \" + encodingPreperationSuccess\n  );\n}\n</code></pre>"},{"location":"reference/ExporterScript/#exporterscriptexportitem","title":"ExporterScript.exportItem()","text":"<p><code>app.getExporter().exportItem(sourcePath, outputPath, presetsPath, matchSource, writeFramesToDisk)</code></p>"},{"location":"reference/ExporterScript/#description_3","title":"Description","text":"<p>Export the source with the provided preset.</p>"},{"location":"reference/ExporterScript/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>sourcePath</code> String Media path or Premiere Pro project path (In case of a Premiere Pro project, the last sequence will be used). <code>outputPath</code> String If <code>outputPath</code> is empty, then the output file location will be generated based on the source location. <code>presetsPath</code> String Multiple preset paths can be provided separated via a <code>|</code> (e.g.\u00a0<code>\"path1|path2|path3\"</code>) <code>matchSource</code> Boolean Optional. Default value is <code>false</code>. <code>writeFramesToDisk</code> Boolean Optional. Default value is <code>false</code>. <code>true</code> writes five frames at 0%, 25%, 50%, 75% and 100% of the full duration.Known issue: Currently it only works with parallel encoding disabled."},{"location":"reference/ExporterScript/#returns_1","title":"Returns","text":"<p>EncoderWrapper object</p>"},{"location":"reference/ExporterScript/#example_3","title":"Example","text":"<pre><code>// Supported: PR projects (last sequence will be used)\n// var source = \"C:\\\\testdata\\\\prProjectTest.prproj;\nvar source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\nvar matchSourceSettings = false; // optional\nvar writeFramesToDisk = false; // optional\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar exporter = app.getExporter();\n\nif (exporter) {\n  // listen to events dispatched by the exporter:\n  exporter.addEventListener(\n    \"onEncodeComplete\",\n    function (eventObj) {\n      $.writeln(\n        \"Encode Complete Status (always true): \" + eventObj.encodeCompleteStatus\n      ); // Complete status always true\n      $.writeln(\n        \"Encode Complete Time (in milliseconds): \" + eventObj.encodeCompleteTime\n      );\n    },\n    false\n  );\n\n  exporter.addEventListener(\n    \"onError\",\n    function (eventObj) {\n      $.writeln(\"Error while encoding\");\n    },\n    false\n  );\n\n  exporter.addEventListener(\n    \"onBatchItemStatusChanged\",\n    function (eventObj) {\n      $.writeln(\"Batch group index: \" + eventObj.groupIndex);\n      $.writeln(\"Batch item index: \" + eventObj.itemIndex);\n      //Possible status values:\n      //kBatchItemStatus_Waiting = 0,\n      //kBatchItemStatus_Done,\n      //kBatchItemStatus_Failed,\n      //kBatchItemStatus_Skipped,\n      //kBatchItemStatus_Encoding,\n      //kBatchItemStatus_Paused,\n      //kBatchItemStatus_Stopped,\n      //kBatchItemStatus_Any,\n      //kBatchItemStatus_AutoStart,\n      //kBatchItemStatus_Done_Warning,\n      //kBatchItemStatus_WatchFolderWaiting\n      $.writeln(\"Batch item status: \" + eventObj.status);\n    },\n    false\n  );\n\n  exporter.addEventListener(\n    \"onEncodingItemProgressUpdated\",\n    function (eventObj) {\n      $.writeln(\"Encoding progress for batch item: \" + eventObj.progress);\n    },\n    false\n  );\n\n  // listen to the audio pre-encoding progress event (available since 24.0.)\n  exporter.addEventListener(\n    \"onAudioPreEncodeProgress\",\n    function (eventObj) {\n      $.writeln(\"Audio pre-encoding info: \" + eventObj.audioInfo);\n      $.writeln(\"Audio pre-encoding progress: \" + eventObj.audioProgress);\n    },\n    false\n  );\n\n  exporter.addEventListener(\n    \"onItemEncodingStarted\",\n    function (eventObj) {\n      $.writeln(\"Encoding started for batch item.\");\n    },\n    false\n  );\n\n  exporter.addEventListener(\n    \"onMediaInfoCreated\",\n    function (eventObj) {\n      $.writeln(\"Media info created\");\n    },\n    false\n  );\n\n  exporter.addEventListener(\n    \"onPostProcessListInitialized\",\n    function (eventObj) {\n      $.writeln(\"Post process list has been initialized.\");\n    },\n    false\n  );\n\n  var encoderWrapper = exporter.exportItem(\n    source,\n    destination,\n    preset,\n    matchSourceSettings,\n    writeFramesToDisk\n  );\n  // Without all optional arguments:\n  // var encoderWrapper  = exporter.exportItem(source, destination, preset);\n\n  if (encoderWrapper) {\n    encoderWrapper.addEventListener(\n      \"onEncodeFinished\",\n      function (eventObj) {\n        $.writeln(\"Encoding result: \" + eventObj.result);\n      },\n      false\n    );\n\n    encoderWrapper.addEventListener(\n      \"onEncodeProgress\",\n      function (eventObj) {\n        $.writeln(\"Encoding progress: \" + eventObj.result);\n      },\n      false\n    );\n  }\n}\n</code></pre>"},{"location":"reference/ExporterScript/#exporterscriptexportsequence","title":"ExporterScript.exportSequence()","text":"<p><code>app.getExporter().exportSequence(projectPath, outputPath, presetsPath, matchSource, writeFramesToDisk, leadingFramesToTrim, trailingFramesToTrim, sequenceName)</code></p>"},{"location":"reference/ExporterScript/#description_4","title":"Description","text":"<p>Export the Premiere Pro sequence with the provided preset.</p>"},{"location":"reference/ExporterScript/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>projectPath</code> String Premiere Pro project path. <code>outputPath</code> String If <code>outputPath</code> is empty, then the output file location will be generated based on the source location. <code>presetsPath</code> String Multiple preset paths can be provided separated via a <code>|</code> (e.g.\u00a0<code>\"path1|path2|path3\"</code>) <code>matchSource</code> Boolean Optional. Default value is <code>false</code>. <code>writeFramesToDisk</code> Boolean Optional. Default value is <code>false</code>. <code>true</code> writes five frames at 0%, 25%, 50%, 75% and 100% of the full duration.Known issue: Currently it only works with parallel encoding disabled. <code>leadingFramesToTrim</code> Integer Optional. Default value is <code>0</code>. <code>trailingFramesToTrim</code> Integer Optional. Default value is <code>0</code>. <code>sequenceName</code> String Optional. If sequence name is empty, then we use the last sequence of the project."},{"location":"reference/ExporterScript/#returns_2","title":"Returns","text":"<p>Boolean; <code>true</code> in case of success.</p>"},{"location":"reference/ExporterScript/#example_4","title":"Example","text":"<pre><code>var preset = \"C:\\\\testdata\\\\XDCAMHD50PAL25p.epr\";\nvar destination = \"C:\\\\testdata\\\\Output\";\nvar projectPath = \"C:\\\\testdata\\\\prProjectTest.prproj\";\n\n// //sources for mac\n// var preset = \"/Users/Shared/testdata/XDCAMHD50PAL25p.epr\";\n// var destination = \"/Users/Shared/testdata/Output\";\n// var projectPath = \"/Users/Shared/testdata/prProjectTest.prproj\";\n\nvar matchSource = false;\nvar writeFramesToDisk = false;\nvar leadingFramesToTrim = 0;\nvar trailingFramesToTrim = 0;\nvar sequenceName = \"AME-Test-Sequence\";\n\nvar exporter = app.getExporter();\n\nif (exporter) {\n  var encodingPreperationSuccess = exporter.exportSequence(\n    projectPath,\n    destination,\n    preset,\n    matchSource,\n    writeFramesToDisk,\n    leadingFramesToTrim,\n    trailingFramesToTrim,\n    sequenceName\n  );\n\n  $.writeln(\n    \"Encoding preparations were successful: \" + encodingPreperationSuccess\n  );\n\n  // please see 'exportGroup' how to register events\n}\n</code></pre>"},{"location":"reference/ExporterScript/#exporterscriptgetsourcemediainfo","title":"ExporterScript.getSourceMediaInfo()","text":"<p><code>app.getExporter().getSourceMediaInfo(sourcePath)</code></p>"},{"location":"reference/ExporterScript/#description_5","title":"Description","text":"<p>Returns a SourceMediaInfo object.</p>"},{"location":"reference/ExporterScript/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>sourcePath</code> String Media path or Premiere Pro project path (In case of a Premiere Pro project the last sequence will be used)."},{"location":"reference/ExporterScript/#returns_3","title":"Returns","text":"<p>SourceMediaInfo object</p>"},{"location":"reference/ExporterScript/#example_5","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n\nvar exporter = app.getExporter();\nif (exporter) {\n  var sourceMediaInfo = exporter.getSourceMediaInfo(source);\n  if (sourceMediaInfo) {\n    $.writeln(\"Success\");\n  }\n}\n</code></pre>"},{"location":"reference/ExporterScript/#exporterscriptremoveallbatchitems","title":"ExporterScript.removeAllBatchItems()","text":"<p><code>app.getExporter().removeAllBatchItems()</code></p>"},{"location":"reference/ExporterScript/#description_6","title":"Description","text":"<p>Remove all batch items from the queue.</p>"},{"location":"reference/ExporterScript/#returns_4","title":"Returns","text":"<p>Boolean; <code>true</code> in case of success.</p>"},{"location":"reference/ExporterScript/#example_6","title":"Example","text":"<pre><code>// Preparation: Be sure there are some batch items in the queue. Otherwise create them via scripting APIs or directly in the UI\n// since we need some batch item in the queue to verify the API removeAllBatchItems\nvar exporter = app.getExporter();\nif (exporter) {\n  var success = exporter.removeAllBatchItems();\n  $.writeln(\"Remove all batch items was successful: \" + success);\n}\n</code></pre>"},{"location":"reference/ExporterScript/#exporterscripttrimexportforsr","title":"ExporterScript.trimExportForSR()","text":"<p><code>app.getExporter().trimExportForSR(sourcePath, outputPath, presetsPath, matchSource, writeFramesToDisk, leadingFramesToTrim, trailingFramesToTrim)</code></p>"},{"location":"reference/ExporterScript/#description_7","title":"Description","text":"<p>Smart render the source with the provided preset.</p>"},{"location":"reference/ExporterScript/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>sourcePath</code> String Media path or Premiere Pro project path (In case of a Premiere Pro project the last sequence will be used). <code>outputPath</code> String If outputPath is empty, then the output file location will be generated based on the source location. <code>presetsPath</code> String Multiple preset paths can be provided separated via a <code>|</code> (e.g.\u00a0<code>\"path1|path2|path3\"</code>) <code>matchSource</code> Boolean Optional. Default value is <code>false</code>. <code>writeFramesToDisk</code> Boolean Optional. Default value is <code>false</code>. <code>true</code> writes five frames at 0%, 25%, 50%, 75% and 100% of the full duration.Known issue: Currently it only works with parallel encoding disabled. <code>leadingFramesToTrim</code> Integer Optional. Default value is <code>0</code>. <code>trailingFramesToTrim</code> Integer Optional. Default value is <code>0</code>."},{"location":"reference/ExporterScript/#returns_5","title":"Returns","text":"<p>Boolean; <code>true</code> in case of success.</p>"},{"location":"reference/ExporterScript/#example_7","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia.mp4\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD50PAL25p.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia.mp4\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD50PAL25p.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar matchSource = false;\nvar writeFramesToDisk = false;\nvar leadingFramesToTrim = 10;\nvar trailingFramesToTrim = 700;\n\nvar exporter = app.getExporter();\nif (exporter) {\n  var encodingPreperationSuccess = exporter.trimExportForSR(\n    source,\n    destination,\n    preset,\n    matchSource,\n    writeFramesToDisk,\n    leadingFramesToTrim,\n    trailingFramesToTrim\n  );\n\n  $.writeln(\n    \"Encoding preparations were successful: \" + encodingPreperationSuccess\n  );\n\n  // please see 'exportGroup' how to register events\n}\n</code></pre>"},{"location":"reference/ExporterScript/#events","title":"Events","text":"<p>Note that in addition to accessing these events by string, they can also be accessed via the following const property:</p> <ul> <li><code>AMEExportEvent.onAudioPreEncodeProgress</code></li> <li><code>AMEExportEvent.onBatchItemStatusChanged</code></li> <li><code>AMEExportEvent.onEncodeComplete</code></li> <li><code>AMEExportEvent.onEncodingItemProgressUpdated</code></li> <li><code>AMEExportEvent.onError</code></li> <li><code>AMEExportEvent.onItemEncodingStarted</code></li> <li><code>AMEExportEvent.onMediaInfoCreated</code></li> <li><code>AMEExportEvent.onPostProcessListInitialized</code></li> </ul>"},{"location":"reference/ExporterScript/#onaudiopreencodeprogress","title":"onAudioPreEncodeProgress","text":"<p><code>app.getExporter().addEventListener(\"onAudioPreEncodeProgress\")</code></p> <p>Note</p> <p>This functionality was added in Media Encoder 24.0</p>"},{"location":"reference/ExporterScript/#description_8","title":"Description","text":"<p>Notify when the audio pre-encode progress changes.</p>"},{"location":"reference/ExporterScript/#properties","title":"Properties","text":"Property Type Description <code>audioInfo</code> String Returns the audio pre-encoding info <code>audioProgress</code> Float Returns the audio pre-encoding progress"},{"location":"reference/ExporterScript/#onbatchitemstatuschanged","title":"onBatchItemStatusChanged","text":"<p><code>app.getExporter().addEventListener(\"onBatchItemStatusChanged\")</code></p>"},{"location":"reference/ExporterScript/#description_9","title":"Description","text":"<p>Notify when batch item status has been changed.</p>"},{"location":"reference/ExporterScript/#properties_1","title":"Properties","text":"Property Type Description <code>groupIndex</code> Unsigned int Returns the batch group index. <code>itemIndex</code> Unsigned int Returns the batch item index. <code>status</code> Unsigned int Returns the batch item status, one of: <ul><li>0 \u2013 Waiting</li><li>1 \u2013 Done</li><li>2 \u2013 Failed</li><li>3 \u2013 Skipped</li><li>4 \u2013 Encoding</li><li>5 \u2013 Paused</li><li>6 \u2013 Stopped</li><li>7 \u2013 Any</li><li>8 \u2013 AutoStart</li><li>9 \u2013 Done Warning</li><li>10 \u2013 Watch Folder Waiting</li></ul>"},{"location":"reference/ExporterScript/#examples","title":"Examples","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar batchItemStatusChangedEvent = AMEExportEvent.onBatchItemStatusChanged;\n$.writeln(\n  \"Event name is identical with the const property API name ('onBatchItemStatusChanged'): \" +\n    batchItemStatusChangedEvent\n);\nvar exporter = app.getExporter();\n\nif (exporter) {\n  exporter.addEventListener(\n    batchItemStatusChangedEvent,\n    function (eventObj) {\n      $.writeln(\"Batch group index: \" + eventObj.groupIndex);\n      $.writeln(\"Batch item index: \" + eventObj.itemIndex);\n      //Possible status values:\n      //kBatchItemStatus_Waiting = 0,\n      //kBatchItemStatus_Done,\n      //kBatchItemStatus_Failed,\n      //kBatchItemStatus_Skipped,\n      //kBatchItemStatus_Encoding,\n      //kBatchItemStatus_Paused,\n      //kBatchItemStatus_Stopped,\n      //kBatchItemStatus_Any,\n      //kBatchItemStatus_AutoStart,\n      //kBatchItemStatus_Done_Warning,\n      //kBatchItemStatus_WatchFolderWaiting\n      $.writeln(\"Batch item status: \" + eventObj.status);\n    },\n    false\n  );\n\n  // Alternatively you can listen to \"onBatchItemStatusChanged\"\n  exporter.addEventListener(\n    \"onBatchItemStatusChanged\",\n    function (eventObj) {\n      $.writeln(\"Batch group index (alt): \" + eventObj.groupIndex);\n      $.writeln(\"Batch item index (alt): \" + eventObj.itemIndex);\n      //Possible status values:\n      //kBatchItemStatus_Waiting = 0,\n      //kBatchItemStatus_Done,\n      //kBatchItemStatus_Failed,\n      //kBatchItemStatus_Skipped,\n      //kBatchItemStatus_Encoding,\n      //kBatchItemStatus_Paused,\n      //kBatchItemStatus_Stopped,\n      //kBatchItemStatus_Any,\n      //kBatchItemStatus_AutoStart,\n      //kBatchItemStatus_Done_Warning,\n      //kBatchItemStatus_WatchFolderWaiting\n      $.writeln(\"Batch item status (alt): \" + eventObj.status);\n    },\n    false\n  );\n\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n}\n</code></pre>"},{"location":"reference/ExporterScript/#status-example","title":"status Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar exporter = app.getExporter();\n\nif (exporter) {\n  exporter.addEventListener(\n    \"onBatchItemStatusChanged\",\n    function (eventObj) {\n      //Possible status values:\n      // 0 : Waiting\n      // 1 : Done\n      // 2 : Failed\n      // 3 : Skipped\n      // 4 : Encoding\n      // 5 : Paused\n      // 6 : Stopped\n      // 7 : Any\n      // 8 : AutoStart\n      // 9 : Done Warning\n      // 10 : Watch Folder Waiting.\n      $.writeln(\"Batch item status: \" + eventObj.status);\n    },\n    false\n  );\n\n  // Alternatively you can access the correct name of that event via the following const property:\n  var batchItemStatusChangedEvent = AMEExportEvent.onBatchItemStatusChanged;\n  exporter.addEventListener(\n    batchItemStatusChangedEvent,\n    function (eventObj) {\n      //Possible status values:\n      // 0 : Waiting\n      // 1 : Done\n      // 2 : Failed\n      // 3 : Skipped\n      // 4 : Encoding\n      // 5 : Paused\n      // 6 : Stopped\n      // 7 : Any\n      // 8 : AutoStart\n      // 9 : Done Warning\n      // 10 : Watch Folder Waiting.\n      $.writeln(\"Batch item status (alt): \" + eventObj.status);\n    },\n    false\n  );\n\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n}\n</code></pre>"},{"location":"reference/ExporterScript/#onencodecomplete","title":"onEncodeComplete","text":"<p><code>app.getExporter().addEventListener(\"onEncodeComplete\")</code></p>"},{"location":"reference/ExporterScript/#description_10","title":"Description","text":"<p>Notify when the batch item has been encoded.</p>"},{"location":"reference/ExporterScript/#properties_2","title":"Properties","text":"Property Type Description <code>encodeCompleteStatus</code> Boolean Returns <code>true</code> after encoding has been completed for a batch item. <code>encodeCompleteTime</code> Float Returns the encoding time in milliseconds."},{"location":"reference/ExporterScript/#examples_1","title":"Examples","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar encodeCompleteEvent = AMEExportEvent.onEncodeComplete;\n\n$.writeln(\n  \"Event name is identical with the const property API name ('onEncodeComplete'): \" +\n    encodeCompleteEvent\n);\nvar exporter = app.getExporter();\n\nif (exporter) {\n  exporter.addEventListener(\n    encodeCompleteEvent,\n    function (eventObj) {\n      $.writeln(\"Encode Complete Status: \" + eventObj.encodeCompleteStatus);\n      $.writeln(\n        \"Encode Complete Time (in milli seconds): \" +\n          eventObj.encodeCompleteTime\n      );\n    },\n    false\n  );\n\n  // Alternatively you can listen to \"onEncodeComplete\"\n  exporter.addEventListener(\n    \"onEncodeComplete\",\n    function (eventObj) {\n      $.writeln(\n        \"Encode Complete Status (alt): \" + eventObj.encodeCompleteStatus\n      );\n      $.writeln(\n        \"Encode Complete Time in milli seconds (alt): \" +\n          eventObj.encodeCompleteTime\n      );\n    },\n    false\n  );\n\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n}\n</code></pre>"},{"location":"reference/ExporterScript/#encodecompletestatus-example","title":"encodeCompleteStatus Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar exporter = app.getExporter();\nif (exporter) {\n  exporter.addEventListener(\n    \"onEncodeComplete\",\n    function (eventObj) {\n      $.writeln(\"Encode Complete Status: \" + eventObj.encodeCompleteStatus);\n    },\n    false\n  );\n\n  // Alternatively you can access the correct name of that event via the following const property:\n  var encodeCompleteEvent = AMEExportEvent.onEncodeComplete;\n  exporter.addEventListener(\n    encodeCompleteEvent,\n    function (eventObj) {\n      $.writeln(\n        \"Encode Complete Status (alt): \" + eventObj.encodeCompleteStatus\n      );\n    },\n    false\n  );\n\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n}\n</code></pre>"},{"location":"reference/ExporterScript/#encodecompletetime-example","title":"encodeCompleteTime Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar exporter = app.getExporter();\nif (exporter) {\n  exporter.addEventListener(\n    \"onEncodeComplete\",\n    function (eventObj) {\n      $.writeln(\n        \"Encode Complete Time in milli seconds: \" + eventObj.encodeCompleteTime\n      );\n    },\n    false\n  );\n\n  // Alternatively you can access the correct name of that event via the following const property:\n  var encodeCompleteEvent = AMEExportEvent.onEncodeComplete;\n  exporter.addEventListener(\n    encodeCompleteEvent,\n    function (eventObj) {\n      $.writeln(\n        \"Encode Complete Time in milli seconds: (alt): \" +\n          eventObj.encodeCompleteTime\n      );\n    },\n    false\n  );\n\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n}\n</code></pre>"},{"location":"reference/ExporterScript/#onencodingitemprogressupdated","title":"onEncodingItemProgressUpdated","text":"<p><code>app.getExporter().addEventListener(\"onEncodingItemProgressUpdated\")</code></p>"},{"location":"reference/ExporterScript/#description_11","title":"Description","text":"<p>Notify the encoding progress.</p>"},{"location":"reference/ExporterScript/#properties_3","title":"Properties","text":"Property Type Description <code>progress</code> Float Returns the batch item encoding progress value which is between 0 and 1."},{"location":"reference/ExporterScript/#examples_2","title":"Examples","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar encodingItemProgressUpdatedEvent =\n  AMEExportEvent.onEncodingItemProgressUpdated;\n$.writeln(\n  \"Event name is identical with the const property API name ('onEncodingItemProgressUpdated'): \" +\n    encodingItemProgressUpdatedEvent\n);\nvar exporter = app.getExporter();\n\nif (exporter) {\n  exporter.addEventListener(\n    encodingItemProgressUpdatedEvent,\n    function (eventObj) {\n      $.writeln(\"Encoding progress for batch item: \" + eventObj.progress);\n    },\n    false\n  );\n\n  // Alternatively you can listen to \"onEncodingItemProgressUpdated\"\n  exporter.addEventListener(\n    \"onEncodingItemProgressUpdated\",\n    function (eventObj) {\n      $.writeln(\"Encoding progress for batch item (alt): \" + eventObj.progress);\n    },\n    false\n  );\n\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n}\n</code></pre>"},{"location":"reference/ExporterScript/#progress-example","title":"progress Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar exporter = app.getExporter();\n\nif (exporter) {\n  exporter.addEventListener(\n    \"onEncodingItemProgressUpdated\",\n    function (eventObj) {\n      $.writeln(\"Encoding progress for batch item: \" + eventObj.progress);\n    },\n    false\n  );\n\n  // Alternatively you can access the correct name of that event via the following const property:\n  var encodingItemProgressUpdatedEvent =\n    AMEExportEvent.onEncodingItemProgressUpdated;\n  exporter.addEventListener(\n    encodingItemProgressUpdatedEvent,\n    function (eventObj) {\n      $.writeln(\"Encoding progress for batch item (alt): \" + eventObj.progress);\n    },\n    false\n  );\n\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n}\n</code></pre>"},{"location":"reference/ExporterScript/#onerror","title":"onError","text":"<p><code>app.getExporter().addEventListener(\"onError\")</code></p>"},{"location":"reference/ExporterScript/#description_12","title":"Description","text":"<p>Notify when there's an error while encoding the batch item.</p>"},{"location":"reference/ExporterScript/#examples_3","title":"Examples","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar errorEvent = AMEExportEvent.onError;\n$.writeln(\n  \"Event name is identical with the const property API name ('onError'): \" +\n    errorEvent\n);\n\nvar exporter = app.getExporter();\n\nif (exporter) {\n  exporter.addEventListener(\n    errorEvent,\n    function (eventObj) {\n      $.writeln(\"Error while encoding\");\n    },\n    false\n  );\n\n  // Alternatively you can listen to \"onError\"\n  exporter.addEventListener(\n    \"onError\",\n    function (eventObj) {\n      $.writeln(\"Error while encoding (alt)\");\n    },\n    false\n  );\n\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n}\n</code></pre>"},{"location":"reference/ExporterScript/#onitemencodingstarted","title":"onItemEncodingStarted","text":"<p><code>app.getExporter().addEventListener(\"onItemEncodingStarted\")</code></p>"},{"location":"reference/ExporterScript/#description_13","title":"Description","text":"<p>Notify when the encoding of a batch item has started.</p>"},{"location":"reference/ExporterScript/#examples_4","title":"Examples","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar itemEncodingStartedEvent = AMEExportEvent.onItemEncodingStarted;\n$.writeln(\n  \"Event name is identical with the const property API name ('onItemEncodingStarted'): \" +\n    itemEncodingStartedEvent\n);\nvar exporter = app.getExporter();\n\nif (exporter) {\n  exporter.addEventListener(\n    itemEncodingStartedEvent,\n    function (eventObj) {\n      $.writeln(\"Encoding started for batch item.\");\n    },\n    false\n  );\n\n  // Alternatively you can listen to \"onItemEncodingStarted\"\n  exporter.addEventListener(\n    \"onItemEncodingStarted\",\n    function (eventObj) {\n      $.writeln(\"Encoding started for batch item (alt).\");\n    },\n    false\n  );\n\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n}\n</code></pre>"},{"location":"reference/ExporterScript/#onmediainfocreated","title":"onMediaInfoCreated","text":"<p><code>app.getExporter().addEventListener(\"onMediaInfoCreated\")</code></p>"},{"location":"reference/ExporterScript/#description_14","title":"Description","text":"<p>Notify when media info has been created.</p>"},{"location":"reference/ExporterScript/#examples_5","title":"Examples","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar mediaInfoCreatedEvent = AMEExportEvent.onMediaInfoCreated;\n$.writeln(\n  \"Event name is identical with the const property API name ('onMediaInfoCreated'): \" +\n    mediaInfoCreatedEvent\n);\nvar exporter = app.getExporter();\n\nif (exporter) {\n  exporter.addEventListener(\n    mediaInfoCreatedEvent,\n    function (eventObj) {\n      $.writeln(\"Media info created\");\n    },\n    false\n  );\n\n  // Alternatively you can listen to \"onMediaInfoCreated\"\n  exporter.addEventListener(\n    \"onMediaInfoCreated\",\n    function (eventObj) {\n      $.writeln(\"Media info created (alt)\");\n    },\n    false\n  );\n\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n}\n</code></pre>"},{"location":"reference/ExporterScript/#onpostprocesslistinitialized","title":"onPostProcessListInitialized","text":"<p><code>app.getExporter().addEventListener(\"onPostProcessListInitialized\")</code></p>"},{"location":"reference/ExporterScript/#description_15","title":"Description","text":"<p>Notify when the post process list is initialized.</p>"},{"location":"reference/ExporterScript/#examples_6","title":"Examples","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\XDCAMHD 50 PAL 50i.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/XDCAMHD 50 PAL 50i.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar postProcessListInitializedEvent =\n  AMEExportEvent.onPostProcessListInitialized;\n$.writeln(\n  \"Event name is identical with the const property API name ('onPostProcessListInitialized'): \" +\n    postProcessListInitializedEvent\n);\nvar exporter = app.getExporter();\n\nif (exporter) {\n  exporter.addEventListener(\n    postProcessListInitializedEvent,\n    function (eventObj) {\n      $.writeln(\"Post process list has been initialized.\");\n    },\n    false\n  );\n\n  // Alternatively you can listen to \"onPostProcessListInitialized\"\n  exporter.addEventListener(\n    \"onPostProcessListInitialized\",\n    function (eventObj) {\n      $.writeln(\"Post process list has been initialized (alt).\");\n    },\n    false\n  );\n\n  var encoderWrapper = exporter.exportItem(source, destination, preset);\n}\n</code></pre>"},{"location":"reference/FrontendScript/","title":"FrontendScript Object","text":"<p><code>app.getFrontend()</code></p> <p>Scripting methods for the frontend.</p>"},{"location":"reference/FrontendScript/#methods","title":"Methods","text":""},{"location":"reference/FrontendScript/#frontendscriptaddcomptobatch","title":"FrontendScript.addCompToBatch()","text":"<p><code>app.getFrontend().addCompToBatch(compPath, [presetPath], [outputPath])</code></p>"},{"location":"reference/FrontendScript/#description","title":"Description","text":"<p>Adds the first comp of an After Effects project resp. the first sequence of a Premiere Pro project to the batch.</p>"},{"location":"reference/FrontendScript/#parameters","title":"Parameters","text":"Parameter Type Description <code>compPath</code> String Path to e.g.\u00a0an After Effects project or Premiere Pro project. The first comp resp. sequence will be used. <code>presetPath</code> String Optional. If <code>presetPath</code> is empty, then the default preset will be applied. <code>outputPath</code> String Optional. If <code>outputPath</code> is empty, then the output file name will be generated based on the comp path."},{"location":"reference/FrontendScript/#returns","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/FrontendScript/#example","title":"Example","text":"<pre><code>var projectPath = \"C:\\\\testdata\\\\aeCompTest.aep\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/aeCompTest.aep\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  // listen for batch item added event\n  frontend.addEventListener(\"onItemAddedToBatch\", function (eventObj) {\n    $.writeln(\"frontend.onItemAddedToBatch: success\");\n  });\n\n  var batchItemSuccess = frontend.addCompToBatch(\n    projectPath,\n    preset,\n    destination\n  );\n  if (batchItemSuccess) {\n    $.writeln(\n      \"Frontend script engine added the source file \",\n      projectPath,\n      \" successfully \"\n    );\n\n    // get encoderHost to be able to listen for the item complete event\n    encoderHost = app.getEncoderHost();\n    if (encoderHost) {\n      encoderHost.addEventListener(\"onItemEncodeComplete\", function (eventObj) {\n        $.writeln(\"Result: \" + eventObj.result);\n        $.writeln(\"Source File Path: \" + eventObj.sourceFilePath);\n        $.writeln(\"Output File Path: \" + eventObj.outputFilePath);\n      });\n\n      encoderHost.runBatch();\n    } else {\n      $.writeln(\"encoderHost not valid\");\n    }\n  } else {\n    $.writeln(\"batch item wasn't added successfully\");\n  }\n} else {\n  $.writeln(\"frontend not valid\");\n}\n</code></pre>"},{"location":"reference/FrontendScript/#frontendscriptadddltobatch","title":"FrontendScript.addDLToBatch()","text":"<p><code>app.getFrontend().addDLToBatch(projectPath, format, presetPath, guid, [outputPath])</code></p>"},{"location":"reference/FrontendScript/#description_1","title":"Description","text":"<p>Adds e.g.\u00a0an After Effects comp or Premiere Pro sequence to the batch and returns an EncoderWrapper.</p>"},{"location":"reference/FrontendScript/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>projectPath</code> String E.g. Premiere Pro or After Effects project path. <code>format</code> String E.g. <code>\"H.264\"</code> <code>presetPath</code> String Either a preset or a format input must be present. If no preset is used then the default preset of the specified format will be applied. <code>guid</code> String The unique id of e.g.\u00a0a Premiere Pro sequence or After Effects composition. <code>outputPath</code> String Optional. If <code>outputPath</code> is empty, then the output file name will be generated based on the project path."},{"location":"reference/FrontendScript/#returns_1","title":"Returns","text":"<p>EncoderWrapper object</p>"},{"location":"reference/FrontendScript/#example_1","title":"Example","text":"<pre><code>// The projectPath can be a path to an AfterEffects, Premiere Pro or Character Animator project\nvar format = \"H.264\";\nvar projectPath = \"C:\\\\testdata\\\\aeCompTest.aep\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var projectPath = \"/Users/Shared/testdata/aeCompTest.aep\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  // first we need the guid of the e.g. ae comps or ppro sequences\n  var result = frontend.getDLItemsAtRoot(projectPath);\n  $.writeln(result.length + \" comps / sequences found.\");\n\n  // import e.g. the first comp / sequence\n  if (result.length &gt; 0) {\n    // listen for batch item added / creation failed event\n    frontend.addEventListener(\"onItemAddedToBatch\", function (eventObj) {\n      $.writeln(\"frontend.onItemAddedToBatch: success\");\n    });\n\n    frontend.addEventListener(\"onBatchItemCreationFailed\", function (eventObj) {\n      $.writeln(\"frontend.onBatchItemCreationFailed: failed\");\n      $.writeln(\"srcFilePath: \" + eventObj.srcFilePath);\n      $.writeln(\"error: \" + eventObj.error);\n    });\n\n    var encoderWrapper = frontend.addDLToBatch(\n      projectPath,\n      format,\n      preset,\n      result[0],\n      destination\n    );\n\n    if (encoderWrapper) {\n      $.writeln(\n        \"Batch item added successfully for comp / sequence guid: \",\n        result[0]\n      );\n\n      // listen for encode progress and encode finish events\n      encoderWrapper.addEventListener(\"onEncodeProgress\", function (eventObj) {\n        $.writeln(\"Encoding progress for batch item: \" + eventObj.result);\n      });\n\n      encoderWrapper.addEventListener(\"onEncodeFinished\", function (eventObj) {\n        $.writeln(\"Encoding result for batch item: \" + eventObj.result);\n      });\n\n      // get encoder host to run batch\n      var encoderHost = app.getEncoderHost();\n      if (encoderHost) {\n        encoderHost.runBatch();\n      } else {\n        $.writeln(\"encoderHost not valid\");\n      }\n    } else {\n      $.writeln(\"encoderWrapper not valid\");\n    }\n  } else {\n    $.writeln(\"the project doesn't have any comps / sequences\");\n  }\n} else {\n  $.writeln(\"frontend not valid\");\n}\n</code></pre>"},{"location":"reference/FrontendScript/#frontendscriptaddfilesequencetobatch","title":"FrontendScript.addFileSequenceToBatch()","text":"<p><code>app.getFrontend().addFileSequenceToBatch(containingFolder, imagePath, presetPath, [outputPath])</code></p>"},{"location":"reference/FrontendScript/#description_2","title":"Description","text":"<p>Adds an image sequence to the batch. The images will be sorted in alphabetical order.</p>"},{"location":"reference/FrontendScript/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>containingFolder</code> String The folder containing image files. <code>imagePath</code> String All images from the containing folder with the same extension will be added to the output file. <code>presetPath</code> String Either a preset or a format input must be present. If no preset is used then the default preset of the specified format will be applied. <code>outputPath</code> String Optional. If <code>outputPath</code> is empty, then the output file name will be generated based on the containingFolder name."},{"location":"reference/FrontendScript/#returns_2","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/FrontendScript/#example_2","title":"Example","text":"<pre><code>var firstFile = \"C:\\\\testdata\\\\Images\\\\AB-1.jpg\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\nvar inContainingFolder = \"C:\\\\testdata\\\\Images\";\n\n// //sources for mac\n// var firstFile = \"/Users/Shared/testdata/Images/AB-1.jpg\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n// var inContainingFolder = \"/Users/Shared/testdata/Images\";\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  // listen for batch item added event\n  frontend.addEventListener(\"onItemAddedToBatch\", function (eventObj) {\n    $.writeln(\"onAddItemToBatch success\");\n  });\n\n  var batchItemSuccess = frontend.addFileSequenceToBatch(\n    inContainingFolder,\n    firstFile,\n    preset,\n    destination\n  );\n\n  if (batchItemSuccess) {\n    $.writeln(\"Batch item added successfully\");\n\n    // get encoderHost to be able to listen for the item complete event\n    var encoderHost = app.getEncoderHost();\n    if (encoderHost) {\n      encoderHost.addEventListener(\"onItemEncodeComplete\", function (eventObj) {\n        $.writeln(\"Result: \" + eventObj.result);\n        $.writeln(\"Source File Path: \" + eventObj.sourceFilePath);\n        $.writeln(\"Output File Path: \" + eventObj.outputFilePath);\n      });\n\n      encoderHost.runBatch();\n    } else {\n      $.writeln(\"encoderHost not valid\");\n    }\n  } else {\n    $.writeln(\"batch item wasn't added successfully\");\n  }\n} else {\n    $.writeln(\"frontend not valid\");\n}\n</code></pre>"},{"location":"reference/FrontendScript/#frontendscriptaddfiletobatch","title":"FrontendScript.addFileToBatch()","text":"<p><code>app.getFrontend().addFileToBatch(filePath, format, presetPath, [outputPath])</code></p>"},{"location":"reference/FrontendScript/#description_3","title":"Description","text":"<p>Adds a file to the batch and returns an EncoderWrapper.</p>"},{"location":"reference/FrontendScript/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>filePath</code> String File path of a media source. <code>format</code> String E.g. <code>\"H.264\"</code> <code>presetPath</code> String Either a preset or a format input must be present. If no preset is used then the default preset of the specified format will be applied. <code>outputPath</code> String Optional. If <code>outputPath</code> is empty, then the output file name will be generated based on the file path."},{"location":"reference/FrontendScript/#returns_3","title":"Returns","text":"<p>EncoderWrapper object</p>"},{"location":"reference/FrontendScript/#example_3","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  // listen for batch item added / creation failed event\n  frontend.addEventListener(\"onItemAddedToBatch\", function (eventObj) {\n    $.writeln(\"frontend.onItemAddedToBatch: success\");\n  });\n\n  frontend.addEventListener(\"onBatchItemCreationFailed\", function (eventObj) {\n    $.writeln(\"frontend.onBatchItemCreationFailed: failed\");\n    $.writeln(\"srcFilePath: \" + eventObj.srcFilePath);\n    $.writeln(\"error: \" + eventObj.error);\n  });\n\n  var encoderWrapper = frontend.addFileToBatch(\n    source,\n    \"H.264\",\n    preset,\n    destination\n  );\n  if (encoderWrapper) {\n    $.writeln(\"Batch item added successfully for source file  \", source);\n\n    // listen for encode progress and encode finish event\n    encoderWrapper.addEventListener(\"onEncodeProgress\", function (eventObj) {\n      $.writeln(\"Encoding progress for batch item: \" + eventObj.result);\n    });\n\n    encoderWrapper.addEventListener(\"onEncodeFinished\", function (eventObj) {\n      $.writeln(\"encoderWrapper.onEncodeFinished Success: \" + eventObj.result);\n    });\n\n    // get encoder host to run batch\n    var encoderHost = app.getEncoderHost();\n    if (encoderHost) {\n      encoderHost.runBatch();\n    } else {\n      $.writeln(\"encoderHost not valid\");\n    }\n  } else {\n    $.writeln(\n      \"encoderWrapper not valid - batch item wasn't added successfully\"\n    );\n  }\n} else {\n  $.writeln(\"frontend not valid\");\n}\n</code></pre>"},{"location":"reference/FrontendScript/#frontendscriptadditemtobatch","title":"FrontendScript.addItemToBatch()","text":"<p><code>app.getFrontend().addItemToBatch(sourcePath)</code></p>"},{"location":"reference/FrontendScript/#description_4","title":"Description","text":"<p>Adds a media source to the batch.</p>"},{"location":"reference/FrontendScript/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>sourcePath</code> String Path of the media source."},{"location":"reference/FrontendScript/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/FrontendScript/#example_4","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  // listen for batch item added event\n  frontend.addEventListener(\"onItemAddedToBatch\", function (eventObj) {\n    $.writeln(\"frontend.onItemAddedToBatch: success\");\n  });\n\n  var batchItemSuccess = frontend.addItemToBatch(source);\n  if (batchItemSuccess) {\n    $.writeln(\"Batch item added successfully for the source file \", source);\n\n    // get encoderHost to be able to listen for the item complete event\n    encoderHost = app.getEncoderHost();\n    if (encoderHost) {\n      encoderHost.addEventListener(\"onItemEncodeComplete\", function (eventObj) {\n        $.writeln(\"Result: \" + eventObj.result);\n        $.writeln(\"Source File Path: \" + eventObj.sourceFilePath);\n        $.writeln(\"Output File Path: \" + eventObj.outputFilePath);\n      });\n\n      encoderHost.runBatch();\n    } else {\n      $.writeln(\"encoderHost not valid\");\n    }\n  } else {\n    $.writeln(\"batch item wasn't added successfully\");\n  }\n} else {\n  $.writeln(\"frontend not valid\");\n}\n</code></pre>"},{"location":"reference/FrontendScript/#frontendscriptaddteamprojectsitemtobatch","title":"FrontendScript.addTeamProjectsItemToBatch()","text":"<p><code>app.getFrontend().addTeamProjectsItemToBatch(projectsURL, format, presetPath, [outputPath])</code></p>"},{"location":"reference/FrontendScript/#description_5","title":"Description","text":"<p>Adds a team project item to the batch and returns an EncoderWrapper.</p>"},{"location":"reference/FrontendScript/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>projectsURL</code> String Team Projects URL or Team Projects Snap. You can create a tp2snap file in PPro for a ProjectItem via the scripting API saveProjectSnapshot. <code>format</code> String E.g. <code>\"H.264\"</code> <code>presetPath</code> String Either a preset or a format input must be present. If no preset is used then the default preset of the specified format will be applied. <code>outputPath</code> String Optional. If <code>outputPath</code> is empty, then the output file name will be generated based on the comp path."},{"location":"reference/FrontendScript/#returns_5","title":"Returns","text":"<p>EncoderWrapper object</p>"},{"location":"reference/FrontendScript/#example_5","title":"Example","text":"<pre><code>// use for the source (projectsURL) a valid Team Projects URL or a Team Projects Snap\n// you can create a tp2snap file in PPro for a ProjectItem via the scripting API saveProjectSnapshot\n// e.g. projectItem.saveProjectSnapshot(\"C:\\\\testdata\\\\test.tp2snap\");\nvar format = \"H.264\";\nvar teamsProjectPath = \"C:\\\\testdata\\\\test.tp2snap\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var teamsProjectPath = \"/Users/Shared/testdata/test.tp2snap\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  // listen for batch item added / creation failed event\n  frontend.addEventListener(\"onItemAddedToBatch\", function (eventObj) {\n    $.writeln(\"frontend.onItemAddedToBatch: success\");\n  });\n\n  frontend.addEventListener(\"onBatchItemCreationFailed\", function (eventObj) {\n    $.writeln(\"frontend.onBatchItemCreationFailed: failed\");\n    $.writeln(\"srcFilePath: \" + eventObj.srcFilePath);\n    $.writeln(\"error: \" + eventObj.error);\n  });\n\n  var encoderWrapper = frontend.addTeamProjectsItemToBatch(\n    teamsProjectPath,\n    format,\n    preset,\n    destination\n  );\n\n  if (encoderWrapper) {\n    $.writeln(\n      \"Batch item added successfully for Team Projects url: \",\n      teamsProjectPath\n    );\n\n    // listen for encode progress and encode finish events\n    encoderWrapper.addEventListener(\"onEncodeProgress\", function (eventObj) {\n      $.writeln(\"Encoding progress for batch item: \" + eventObj.result);\n    });\n\n    encoderWrapper.addEventListener(\"onEncodeFinished\", function (eventObj) {\n      $.writeln(\"Encoding result for batch item: \" + eventObj.result);\n    });\n\n    // get encoder host to run batch\n    var encoderHost = app.getEncoderHost();\n\n    if (encoderHost) {\n      encoderHost.runBatch();\n    } else {\n      $.writeln(\"encoderHost not valid\");\n    }\n  } else {\n    $.writeln(\"batch item wasn't added successfully\");\n  }\n} else {\n  $.writeln(\"frontend not valid\");\n}\n</code></pre>"},{"location":"reference/FrontendScript/#frontendscriptaddxmltobatch","title":"FrontendScript.addXMLToBatch()","text":"<p><code>app.getFrontend().addXMLToBatch(xmlPath, presetPath, [outputFolderPath])</code></p>"},{"location":"reference/FrontendScript/#description_6","title":"Description","text":"<p>Adds Final Cut Pro xml to the batch.</p>"},{"location":"reference/FrontendScript/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>xmlPath</code> String Path to a Final Cut Pro xml file. <code>outputFolderPath</code> String Optional. If <code>outputFolderPath</code> is empty, then the output file name will be generated based on the XML file path."},{"location":"reference/FrontendScript/#returns_6","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/FrontendScript/#example_6","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\FCP-3.xml\"; // Final Cut Pro xml file\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/FCP-3.xml\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  // listen for batch item added event\n  frontend.addEventListener(\"onItemAddedToBatch\", function (eventObj) {\n    $.writeln(\"onAddItemToBatch success\");\n  });\n\n  var batchItemsuccess = frontend.addXMLToBatch(source, preset);\n\n  if (batchItemsuccess) {\n    $.writeln(\"Added xml file to batch successfully.\");\n\n    // get encoder host to listen for onItemEncodeComplete event and run batch\n    encoderHost = app.getEncoderHost();\n    if (encoderHost) {\n      encoderHost.addEventListener(\"onItemEncodeComplete\", function (eventObj) {\n        $.writeln(\"Result: \" + eventObj.result);\n        $.writeln(\"Source File Path: \" + eventObj.sourceFilePath);\n        $.writeln(\"Output File Path: \" + eventObj.outputFilePath);\n      });\n      encoderHost.runBatch();\n    } else {\n      $.writeln(\"encoderHost not valid\");\n    }\n  } else {\n    $.writeln(\"batch item wasn't added successfully\");\n  }\n} else {\n  $.writeln(\"frontend not valid\");\n}\n</code></pre>"},{"location":"reference/FrontendScript/#frontendscriptgetdlitemsatroot","title":"FrontendScript.getDLItemsAtRoot()","text":"<p><code>app.getFrontend().getDLItemsAtRoot(projectPath)</code></p>"},{"location":"reference/FrontendScript/#description_7","title":"Description","text":"<p>Returns the list of GUIDs for objects (sequences/comps) at the top/root level.</p>"},{"location":"reference/FrontendScript/#parameters_7","title":"Parameters","text":"Parameter Type Description <code>projectPath</code> String E.g. Premiere Pro or After Effects project path."},{"location":"reference/FrontendScript/#returns_7","title":"Returns","text":"<p>Array of strings</p>"},{"location":"reference/FrontendScript/#example_7","title":"Example","text":"<pre><code>var projectPath = \"C:\\\\testdata\\\\aeCompTest.aep\"; // project path\n\n// //sources for mac\n// var projectPath = \"/Users/Shared/testdata/aeCompTest.aep\"\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  var result = frontend.getDLItemsAtRoot(projectPath);\n\n  $.writeln(result.length + \" ae comps found.\");\n  for (var idx = 0; idx &lt; result.length; ++idx) {\n    $.writeln(\"GUID for item \" + idx + \" is \" + result[idx] + \".\");\n\n    // These guids will be needed for e.g. the API frontend.addDLToBatch\n  }\n} else {\n  $.writeln(\"frontend not valid\");\n}\n</code></pre>"},{"location":"reference/FrontendScript/#frontendscriptstitchfiles","title":"FrontendScript.stitchFiles()","text":"<p><code>app.getFrontend().stitchFiles(mediaPaths, format, presetPath, [outputPath])</code></p>"},{"location":"reference/FrontendScript/#description_8","title":"Description","text":"<p>Adds a batch item for the given media and returns an EncoderWrapper.</p>"},{"location":"reference/FrontendScript/#parameters_8","title":"Parameters","text":"Parameter Type Description <code>mediaPaths</code> String Semicolon delimited list of media paths. <code>format</code> String E.g. <code>\"H.264\"</code> <code>presetPath</code> String Either a preset or a format input must be present. If no preset is used then the default preset of the specified format will be applied. <code>outputPath</code> String Optional. If <code>outputPath</code> is empty, then the output file name will be generated based on the comp path."},{"location":"reference/FrontendScript/#returns_8","title":"Returns","text":"<p>EncoderWrapper object</p>"},{"location":"reference/FrontendScript/#example_8","title":"Example","text":"<pre><code>var format = \"H.264\";\nvar media_1 = \"C:\\\\testdata\\\\testmedia.mp4\";\nvar media_2 = \"C:\\\\testdata\\\\testmedia2.mp4.\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var media_1 = \"/Users/Shared/testdata/testmedia.mp4\"\n// var media_2 = \"/Users/Shared/testdata/testmedia2.avi\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar mediaPaths = media_1 + \";\" + media_2;\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  // listen for batch item added / creation failed event\n  frontend.addEventListener(\"onItemAddedToBatch\", function (eventObj) {\n    $.writeln(\"onAddItemToBatch success\");\n  });\n\n  frontend.addEventListener(\"onBatchItemCreationFailed\", function (eventObj) {\n    $.writeln(\"onBatchItemCreationFailed\");\n  });\n\n  var encoderWrapper = frontend.stitchFiles(\n    mediaPaths,\n    format,\n    preset,\n    destination\n  );\n\n  if (encoderWrapper) {\n    $.writeln(\"Batch item added successfully\");\n\n    // listen for encode progress and encode finish events\n    encoderWrapper.addEventListener(\"onEncodeProgress\", function (eventObj) {\n      $.writeln(\"Encoding progress for batch item: \" + eventObj.result);\n    });\n\n    encoderWrapper.addEventListener(\"onEncodeFinished\", function (eventObj) {\n      $.writeln(\"Encoding result for batch item: \" + eventObj.result);\n    });\n\n    // get encoder host to run batch\n    var encoderHost = app.getEncoderHost();\n\n    if (encoderHost) {\n      encoderHost.runBatch();\n    } else {\n      $.writeln(\"encoderHost not valid\");\n    }\n  } else {\n    $.writeln(\"encoderWrapper not valid\");\n  }\n} else {\n  $.writeln(\"frontend not valid\");\n}\n</code></pre>"},{"location":"reference/FrontendScript/#frontendscriptstopbatch","title":"FrontendScript.stopBatch()","text":"<p><code>app.getFrontend().stopBatch()</code></p>"},{"location":"reference/FrontendScript/#description_9","title":"Description","text":"<p>Stops the batch.</p>"},{"location":"reference/FrontendScript/#returns_9","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/FrontendScript/#events","title":"Events","text":""},{"location":"reference/FrontendScript/#onbatchitemcreationfailed","title":"onBatchItemCreationFailed","text":"<p><code>app.getFrontend().addEventListener(\"onBatchItemCreationFailed\")</code></p>"},{"location":"reference/FrontendScript/#description_10","title":"Description","text":"<p>The event will be sent after batch item creation failed.</p> <p>Can be used for the following FrontendScript Object APIs:</p> <ul> <li>FrontendScript.addFileToBatch()</li> <li>FrontendScript.addTeamProjectsItemToBatch()</li> <li>FrontendScript.addDLToBatch()</li> </ul>"},{"location":"reference/FrontendScript/#properties","title":"Properties","text":"Property Type Description <code>error</code> String The error string <code>srcFilePath</code> String The source file path"},{"location":"reference/FrontendScript/#example_9","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia.mp4\";\n\n// sources for mac\n// var source = \"/Users/Shared/testdata/testmedia.mp4\"\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  frontend.addEventListener(\"onBatchItemCreationFailed\", function (eventObj) {\n    $.writeln(\"Sourcefile\", eventObj.srcFilePath);\n    $.writeln(\"onBatchItemCreationFailed: error\", eventObj.error);\n  });\n\n  var batchItemSuccess = frontend.addItemToBatch(source);\n  if (batchItemSuccess) {\n    $.writeln(source, \" has been added successfully\");\n  }\n}\n</code></pre>"},{"location":"reference/FrontendScript/#onitemaddedtobatch","title":"onItemAddedToBatch","text":"<p><code>app.getFrontend().addEventListener(\"onItemAddedToBatch\")</code></p>"},{"location":"reference/FrontendScript/#description_11","title":"Description","text":"<p>The event will be sent after a batch item has been created successfully.</p> <p>Can be used for all FrontendScript Object APIs which creates a batch item.</p>"},{"location":"reference/FrontendScript/#example_10","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia.mp4\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia.mp4\"\n\nvar frontend = app.getFrontend();\nif (frontend) {\n  frontend.addEventListener(\"onItemAddedToBatch\", function (eventObj) {\n    $.writeln(\"Item added to Batch\");\n  });\n\n  var batchItemSuccess = frontend.addItemToBatch(source);\n  if (batchItemSuccess) {\n    $.writeln(source, \" has been added successfully\");\n  }\n}\n</code></pre>"},{"location":"reference/SourceMediaInfo/","title":"SourceMediaInfo Object","text":"<p><code>app.getExporter().getSourceMediaInfo(source)</code></p> <p>Holds various information about a given source</p>"},{"location":"reference/SourceMediaInfo/#properties","title":"Properties","text":""},{"location":"reference/SourceMediaInfo/#sourcemediainfoaudioduration","title":"SourceMediaInfo.audioDuration","text":"<p><code>app.getExporter().getSourceMediaInfo(source).audioDuration</code></p>"},{"location":"reference/SourceMediaInfo/#description","title":"Description","text":"<p>Returns the audio duration of the source</p>"},{"location":"reference/SourceMediaInfo/#type","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfodescription","title":"SourceMediaInfo.description","text":"<p><code>app.getExporter().getSourceMediaInfo(source).description</code></p>"},{"location":"reference/SourceMediaInfo/#description_1","title":"Description","text":"<p>Returns embedded description of the source</p>"},{"location":"reference/SourceMediaInfo/#type_1","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfodropframetimecode","title":"SourceMediaInfo.dropFrameTimeCode","text":"<p><code>app.getExporter().getSourceMediaInfo(source).dropFrameTimeCode</code></p>"},{"location":"reference/SourceMediaInfo/#description_2","title":"Description","text":"<p>Returns true if the timecode is a drop frame timecode</p>"},{"location":"reference/SourceMediaInfo/#type_2","title":"Type","text":"<p>Boolean</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfoduration","title":"SourceMediaInfo.duration","text":"<p><code>app.getExporter().getSourceMediaInfo(source).duration</code></p>"},{"location":"reference/SourceMediaInfo/#description_3","title":"Description","text":"<p>Returns duration of the source</p>"},{"location":"reference/SourceMediaInfo/#type_3","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfodurationinticks","title":"SourceMediaInfo.durationInTicks","text":"<p><code>app.getExporter().getSourceMediaInfo(source).durationInTicks</code></p> <p>Note</p> <p>This functionality was added in Media Encoder 23.3</p>"},{"location":"reference/SourceMediaInfo/#description_4","title":"Description","text":"<p>Returns duration of the source in ticks</p>"},{"location":"reference/SourceMediaInfo/#type_4","title":"Type","text":"<p>None</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfofieldtype","title":"SourceMediaInfo.fieldType","text":"<p><code>app.getExporter().getSourceMediaInfo(source).fieldType</code></p>"},{"location":"reference/SourceMediaInfo/#description_5","title":"Description","text":"<p>Returns field type of the source</p>"},{"location":"reference/SourceMediaInfo/#type_5","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfoframerate","title":"SourceMediaInfo.frameRate","text":"<p><code>app.getExporter().getSourceMediaInfo(source).frameRate</code></p>"},{"location":"reference/SourceMediaInfo/#description_6","title":"Description","text":"<p>Returns frame rate of the source</p>"},{"location":"reference/SourceMediaInfo/#type_6","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfoheight","title":"SourceMediaInfo.height","text":"<p><code>app.getExporter().getSourceMediaInfo(source).height</code></p>"},{"location":"reference/SourceMediaInfo/#description_7","title":"Description","text":"<p>Returns height of the source</p>"},{"location":"reference/SourceMediaInfo/#type_7","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfoimporter","title":"SourceMediaInfo.importer","text":"<p><code>app.getExporter().getSourceMediaInfo(source).importer</code></p>"},{"location":"reference/SourceMediaInfo/#description_8","title":"Description","text":"<p>Returns the importer used to decode the source</p>"},{"location":"reference/SourceMediaInfo/#type_8","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfonumchannels","title":"SourceMediaInfo.numChannels","text":"<p><code>app.getExporter().getSourceMediaInfo(source).numChannels</code></p>"},{"location":"reference/SourceMediaInfo/#description_9","title":"Description","text":"<p>Returns the number of audio channels of the source</p>"},{"location":"reference/SourceMediaInfo/#type_9","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfoparx","title":"SourceMediaInfo.parX","text":"<p><code>app.getExporter().getSourceMediaInfo(source).parX</code></p>"},{"location":"reference/SourceMediaInfo/#description_10","title":"Description","text":"<p>Returns the X PAR of the source</p>"},{"location":"reference/SourceMediaInfo/#type_10","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfopary","title":"SourceMediaInfo.parY","text":"<p><code>app.getExporter().getSourceMediaInfo(source).parY</code></p>"},{"location":"reference/SourceMediaInfo/#description_11","title":"Description","text":"<p>Returns the Y PAR of the source</p>"},{"location":"reference/SourceMediaInfo/#type_11","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfosamplerate","title":"SourceMediaInfo.sampleRate","text":"<p><code>app.getExporter().getSourceMediaInfo(source).sampleRate</code></p>"},{"location":"reference/SourceMediaInfo/#description_12","title":"Description","text":"<p>Returns sample rate of the source</p>"},{"location":"reference/SourceMediaInfo/#type_12","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfowidth","title":"SourceMediaInfo.width","text":"<p><code>app.getExporter().getSourceMediaInfo(source).width</code></p>"},{"location":"reference/SourceMediaInfo/#description_13","title":"Description","text":"<p>Returns width of the source</p>"},{"location":"reference/SourceMediaInfo/#type_13","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#sourcemediainfoxmp","title":"SourceMediaInfo.xmp","text":"<p><code>app.getExporter().getSourceMediaInfo(source).xmp</code></p>"},{"location":"reference/SourceMediaInfo/#description_14","title":"Description","text":"<p>Returns xmp xml of the source</p>"},{"location":"reference/SourceMediaInfo/#type_14","title":"Type","text":"<p>String</p>"},{"location":"reference/SourceMediaInfo/#example","title":"Example","text":"<pre><code>var source = \"C:\\\\testdata\\\\testmedia3.mxf\";\n\n// //sources for mac\n// var source = \"/Users/Shared/testdata/testmedia3.mxf\"\n\nvar exporter = app.getExporter();\nif (exporter) {\n  var sourceMediaInfo = exporter.getSourceMediaInfo(source);\n  if (sourceMediaInfo) {\n    var audioDuration = sourceMediaInfo.audioDuration;\n    $.writeln(\"audio duration of the source: \" + audioDuration);\n\n    var description = sourceMediaInfo.description;\n    $.writeln(\"description of the source: \" + description);\n\n    var isDropFrame = sourceMediaInfo.dropFrameTimeCode;\n    $.writeln(\"is drop frame: \" + dropFrameTimeCode);\n\n    var duration = sourceMediaInfo.duration;\n    $.writeln(\"duration of the source: \" + duration);\n\n    var fieldType = sourceMediaInfo.fieldType;\n    $.writeln(\"field type of the source: \" + fieldType);\n\n    var frameRate = sourceMediaInfo.frameRate;\n    $.writeln(\"frame rate of the source: \" + frameRate);\n\n    var height = sourceMediaInfo.height;\n    $.writeln(\"height of the source: \" + height);\n\n    var importer = sourceMediaInfo.importer;\n    $.writeln(\"importer of the source: \" + importer);\n\n    var numChannels = sourceMediaInfo.numChannels;\n    $.writeln(\"num channels of the source: \" + numChannels);\n\n    var parX = sourceMediaInfo.parX;\n    $.writeln(\"par X of the source: \" + parX);\n\n    var parY = sourceMediaInfo.parY;\n    $.writeln(\"par Y of the source: \" + parY);\n\n    var sampleRate = sourceMediaInfo.sampleRate;\n    $.writeln(\"sample rate of the source: \" + sampleRate);\n\n    var width = sourceMediaInfo.width;\n    $.writeln(\"width of the source: \" + width);\n\n    var xmp = sourceMediaInfo.xmp;\n    $.writeln(\"xmp of the source: \" + xmp);\n  }\n}\n</code></pre>"},{"location":"reference/WatchFolderScript/","title":"WatchFolderScript Object","text":"<p><code>app.getWatchFolder()</code></p> <p>Scripting methods for watch folders</p>"},{"location":"reference/WatchFolderScript/#methods","title":"Methods","text":""},{"location":"reference/WatchFolderScript/#watchfoldercreatewatchfolder","title":"WatchFolder.createWatchFolder()","text":"<p><code>app.getWatchFolder().createWatchFolder(folderPath, outputPath, presetPath)</code></p>"},{"location":"reference/WatchFolderScript/#description","title":"Description","text":"<p>Create a watch folder at destination for the preset and add the source</p>"},{"location":"reference/WatchFolderScript/#parameters","title":"Parameters","text":"Parameter Type Description <code>folderPath</code> String The path to the folder which should be added as watch folder <code>outputPath</code> String The output path <code>presetPath</code> String The preset path to use"},{"location":"reference/WatchFolderScript/#returns","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/WatchFolderScript/#example","title":"Example","text":"<pre><code>var folder = \"C:\\\\testdata\\\\watchFolder\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\nvar destination = \"C:\\\\testdata\\\\outputFolder\";\n\n// //sources for mac\n// var folder = \"/Users/Shared/testdata/watchFolder\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n// var destination = \"/Users/Shared/testdata/outputFolder\";\n\nvar watchFolder = app.getWatchFolder();\nif (watchFolder) {\n  var watchFolderSuccess = watchFolder.createWatchFolder(\n    folder,\n    destination,\n    preset\n  );\n\n  if (watchFolderSuccess) {\n    $.writeln(folder, \" added as a watch folder\");\n    encoderHostWrapper = app.getEncoderHost();\n    if (encoderHostWrapper) {\n      watchFolder.addEventListener(\"onEncodeComplete\", function (eventObj) {\n        $.writeln(\"Elapsed Time: \" + eventObj.elapsedTime);\n        $.writeln(\"watchFolder.onEncodeComplete\");\n      });\n\n      watchFolder.addEventListener(\"onEncodeError\", function (eventObj) {\n        $.writeln(\"watchFolder.onEncodeError\");\n      });\n\n      encoderHostWrapper.runBatch();\n    } else {\n      $.writeln(\"EncoderHostWrapper object is not valid\");\n    }\n  } else {\n    $.writeln(\"Watch folder was not created\");\n  }\n}\n</code></pre>"},{"location":"reference/WatchFolderScript/#watchfolderremoveallwatchfolders","title":"WatchFolder.removeAllWatchFolders()","text":"<p><code>app.getWatchFolder().removeAllWatchFolders()</code></p>"},{"location":"reference/WatchFolderScript/#description_1","title":"Description","text":"<p>Remove all watch folders</p>"},{"location":"reference/WatchFolderScript/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"reference/WatchFolderScript/#example_1","title":"Example","text":"<pre><code>var folder = \"C:\\\\testdata\\\\watchFolder\";\nvar preset = \"C:\\\\testdata\\\\HighQuality720HD.epr\";\nvar destination = \"C:\\\\testdata\\\\outputWatchfolder1\";\nvar folder2 = \"C:\\\\testdata\\\\watchFolder2\";\nvar destination2 = \"C:\\\\testdata\\\\outputWatchfolder2\";\n\n// //sources for mac\n// var folder = \"/Users/Shared/testdata/watchFolder\"\n// var preset = \"/Users/Shared/testdata/HighQuality720HD.epr\";\n// var destination = \"/Users/Shared/testdata/outputWatchfolder1\";\n// var folder2 = \"/Users/Shared/testdata/watchFolder2\"\n// var destination2 = \"/Users/Shared/testdata/outputWatchfolder2\";\n\nvar watchFolderObj = app.getWatchFolder();\nif (watchFolderObj) {\n  watchFolder.createWatchFolder(folder, destination, preset);\n  watchFolder.createWatchFolder(folder2, destination2, preset);\n  watchFolderObj.removeAllWatchFolders();\n} else {\n  $.writeln(\"Watch folder object is not valid\");\n}\n</code></pre>"},{"location":"reference/WatchFolderScript/#events","title":"Events","text":""},{"location":"reference/WatchFolderScript/#onencodecomplete","title":"onEncodeComplete","text":"<p><code>app.getWatchFolder().addEventListener(\"onEncodeComplete\")</code></p>"},{"location":"reference/WatchFolderScript/#description_2","title":"Description","text":"<p>Notify when the watchfolder job item is complete.</p>"},{"location":"reference/WatchFolderScript/#properties","title":"Properties","text":"Property Type Description <code>elapsedTime</code> Float The encoding elapsed time, in milliseconds"},{"location":"reference/WatchFolderScript/#onencodeerror","title":"onEncodeError","text":"<p><code>app.getWatchFolder().addEventListener(\"onEncodeError\")</code></p>"},{"location":"reference/WatchFolderScript/#description_3","title":"Description","text":"<p>Notify when the watchfolder job encode fails.</p>"}]}